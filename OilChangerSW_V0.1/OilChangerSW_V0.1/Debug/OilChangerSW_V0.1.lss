
OilChangerSW_V0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00001866  000018fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  008001c0  008001c0  000019ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003310  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016bc  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002011  00000000  00000000  00006754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00008768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e38  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028be  00000000  00000000  00009e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000c72a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_24>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_39>
      a0:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 e6       	ldi	r30, 0x66	; 102
      c8:	f8 e1       	ldi	r31, 0x18	; 24
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 3c       	cpi	r26, 0xC0	; 192
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	a0 ec       	ldi	r26, 0xC0	; 192
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a2 31       	cpi	r26, 0x12	; 18
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 87 06 	call	0xd0e	; 0xd0e <main>
      ea:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:
	adc_pin_select(source);
	//uint16_t adc_tmp_data = adc_convert();
	return ADC_VOLT(adc_convert());
}

void setExtAdcCh(uint8_t devAddr, uint8_t ch, uint8_t pgaMode){
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <getExtAdc>:
	
}

uint16_t getExtAdc(uint8_t devAddr, uint8_t ch, uint8_t pgaMode){
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <getExtAdc+0x8>
     118:	00 d0       	rcall	.+0      	; 0x11a <getExtAdc+0xa>
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	18 2f       	mov	r17, r24
     120:	86 2f       	mov	r24, r22
	uint16_t configReg = 0x8000;
	configReg |= (SPS_8 << DR) | (SINGLE_CONV << MODE) | (pgaMode << PGA) | (ch << MUX);
     122:	64 2f       	mov	r22, r20
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	76 2f       	mov	r23, r22
     128:	66 27       	eor	r22, r22
     12a:	77 0f       	add	r23, r23
     12c:	ab 01       	movw	r20, r22
     12e:	51 60       	ori	r21, 0x01	; 1
     130:	68 2f       	mov	r22, r24
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	76 2f       	mov	r23, r22
     136:	66 27       	eor	r22, r22
     138:	72 95       	swap	r23
     13a:	70 7f       	andi	r23, 0xF0	; 240
     13c:	64 2b       	or	r22, r20
     13e:	75 2b       	or	r23, r21
     140:	70 68       	ori	r23, 0x80	; 128
	
	//configReg =0b1000111110000001;
	uint8_t configRegRaw[2] = {0, 0};
	uint8_t returnRegs[2];
	
	configRegRaw[1] = configReg & 0xFF;
     142:	6a 83       	std	Y+2, r22	; 0x02
	configRegRaw[0] = (configReg >> 8) & 0xFF;
     144:	79 83       	std	Y+1, r23	; 0x01
	
	twi1_write(devAddr,1,configRegRaw,sizeof(configRegRaw));
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	ae 01       	movw	r20, r28
     14c:	4f 5f       	subi	r20, 0xFF	; 255
     14e:	5f 4f       	sbci	r21, 0xFF	; 255
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	81 2f       	mov	r24, r17
     154:	0e 94 13 04 	call	0x826	; 0x826 <twi1_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	2f ef       	ldi	r18, 0xFF	; 255
     15a:	83 ec       	ldi	r24, 0xC3	; 195
     15c:	99 e0       	ldi	r25, 0x09	; 9
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <getExtAdc+0x4e>
     166:	00 c0       	rjmp	.+0      	; 0x168 <getExtAdc+0x58>
     168:	00 00       	nop
	_delay_ms(200);
	twi1_read(devAddr,0, returnRegs, sizeof(returnRegs));
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	ae 01       	movw	r20, r28
     170:	4d 5f       	subi	r20, 0xFD	; 253
     172:	5f 4f       	sbci	r21, 0xFF	; 255
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	81 2f       	mov	r24, r17
     178:	0e 94 98 03 	call	0x730	; 0x730 <twi1_read>
	return (returnRegs[0] << 8) + returnRegs[1];
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	98 2f       	mov	r25, r24
     182:	88 27       	eor	r24, r24
     184:	2c 81       	ldd	r18, Y+4	; 0x04
}
     186:	82 0f       	add	r24, r18
     188:	91 1d       	adc	r25, r1
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	1f 91       	pop	r17
     198:	08 95       	ret

0000019a <EEPROM_read>:
#include "eeprom.h"



uint8_t EEPROM_read(uint16_t uiAddress, uint8_t *data)
{
     19a:	9c 01       	movw	r18, r24
	
	if(uiAddress > EEPROM_SIZE){
     19c:	21 15       	cp	r18, r1
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	38 07       	cpc	r19, r24
     1a2:	70 f4       	brcc	.+28     	; 0x1c0 <EEPROM_read+0x26>
		return EEPROM_INVALID_ADDR;
	}
	
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     1a4:	9f b3       	in	r25, 0x1f	; 31
     1a6:	89 2f       	mov	r24, r25
     1a8:	82 70       	andi	r24, 0x02	; 2
     1aa:	91 fd       	sbrc	r25, 1
     1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <EEPROM_read+0xa>
	/* Set up address register */
	EEARH = (uiAddress & 0xFF00) >> 8;
     1ae:	32 bd       	out	0x22, r19	; 34
	EEARL = (uiAddress & 0x00FF);
     1b0:	21 bd       	out	0x21, r18	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     1b2:	9f b3       	in	r25, 0x1f	; 31
     1b4:	91 60       	ori	r25, 0x01	; 1
     1b6:	9f bb       	out	0x1f, r25	; 31
	/* Return data from Data Register */
	*data = EEDR;
     1b8:	90 b5       	in	r25, 0x20	; 32
     1ba:	fb 01       	movw	r30, r22
     1bc:	90 83       	st	Z, r25
	return EEPROM_OK;
     1be:	08 95       	ret

uint8_t EEPROM_read(uint16_t uiAddress, uint8_t *data)
{
	
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
     1c0:	82 e0       	ldi	r24, 0x02	; 2
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	/* Return data from Data Register */
	*data = EEDR;
	return EEPROM_OK;
}
     1c2:	08 95       	ret

000001c4 <EEPROM_write>:


uint8_t EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
     1c4:	9c 01       	movw	r18, r24
	if(uiAddress > EEPROM_SIZE){
     1c6:	21 15       	cp	r18, r1
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	38 07       	cpc	r19, r24
     1cc:	78 f4       	brcc	.+30     	; 0x1ec <EEPROM_write+0x28>
		return EEPROM_INVALID_ADDR;
	}
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     1ce:	9f b3       	in	r25, 0x1f	; 31
     1d0:	89 2f       	mov	r24, r25
     1d2:	82 70       	andi	r24, 0x02	; 2
     1d4:	91 fd       	sbrc	r25, 1
     1d6:	fb cf       	rjmp	.-10     	; 0x1ce <EEPROM_write+0xa>
	/* Set up address and Data Registers */
	EEARH = (uiAddress & 0xFF00) >> 8;
     1d8:	32 bd       	out	0x22, r19	; 34
	EEARL = (uiAddress & 0x00FF);
     1da:	21 bd       	out	0x21, r18	; 33
	EEDR = ucData;
     1dc:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     1de:	9f b3       	in	r25, 0x1f	; 31
     1e0:	94 60       	ori	r25, 0x04	; 4
     1e2:	9f bb       	out	0x1f, r25	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     1e4:	9f b3       	in	r25, 0x1f	; 31
     1e6:	92 60       	ori	r25, 0x02	; 2
     1e8:	9f bb       	out	0x1f, r25	; 31
	return EEPROM_OK;
     1ea:	08 95       	ret


uint8_t EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
     1ec:	82 e0       	ldi	r24, 0x02	; 2
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
	return EEPROM_OK;
}
     1ee:	08 95       	ret

000001f0 <EEPROM_update>:

uint8_t EEPROM_update(uint16_t uiAddress, uint8_t ucData){
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	1f 92       	push	r1
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t err = EEPROM_OK;
	if(uiAddress > EEPROM_SIZE){
     200:	81 15       	cp	r24, r1
     202:	24 e0       	ldi	r18, 0x04	; 4
     204:	92 07       	cpc	r25, r18
     206:	00 f5       	brcc	.+64     	; 0x248 <EEPROM_update+0x58>
     208:	f6 2e       	mov	r15, r22
     20a:	8c 01       	movw	r16, r24
		return EEPROM_INVALID_ADDR;
	}
	uint8_t value = 0;
     20c:	19 82       	std	Y+1, r1	; 0x01
	
	err = EEPROM_read(uiAddress,&value);
     20e:	be 01       	movw	r22, r28
     210:	6f 5f       	subi	r22, 0xFF	; 255
     212:	7f 4f       	sbci	r23, 0xFF	; 255
     214:	0e 94 cd 00 	call	0x19a	; 0x19a <EEPROM_read>
	if(err != EEPROM_OK){
     218:	81 11       	cpse	r24, r1
     21a:	1b c0       	rjmp	.+54     	; 0x252 <EEPROM_update+0x62>
		return err;
	}
	if(value == ucData){
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	8f 15       	cp	r24, r15
     220:	a9 f0       	breq	.+42     	; 0x24c <EEPROM_update+0x5c>
		return EEPROM_OK;
	}
	
	err = EEPROM_write(uiAddress,ucData);
     222:	6f 2d       	mov	r22, r15
     224:	c8 01       	movw	r24, r16
     226:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EEPROM_write>
	if(err != EEPROM_OK){
     22a:	81 11       	cpse	r24, r1
     22c:	12 c0       	rjmp	.+36     	; 0x252 <EEPROM_update+0x62>
		return err;
	}
	
	err = EEPROM_read(uiAddress,&value);
     22e:	be 01       	movw	r22, r28
     230:	6f 5f       	subi	r22, 0xFF	; 255
     232:	7f 4f       	sbci	r23, 0xFF	; 255
     234:	c8 01       	movw	r24, r16
     236:	0e 94 cd 00 	call	0x19a	; 0x19a <EEPROM_read>
	if(err != EEPROM_OK){
     23a:	81 11       	cpse	r24, r1
     23c:	0a c0       	rjmp	.+20     	; 0x252 <EEPROM_update+0x62>
		return err;
	}
	if(value != ucData){
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	f8 16       	cp	r15, r24
     242:	31 f0       	breq	.+12     	; 0x250 <EEPROM_update+0x60>
		return EEPROM_WRITE_FAIL;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	05 c0       	rjmp	.+10     	; 0x252 <EEPROM_update+0x62>
}

uint8_t EEPROM_update(uint16_t uiAddress, uint8_t ucData){
	uint8_t err = EEPROM_OK;
	if(uiAddress > EEPROM_SIZE){
		return EEPROM_INVALID_ADDR;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	03 c0       	rjmp	.+6      	; 0x252 <EEPROM_update+0x62>
	err = EEPROM_read(uiAddress,&value);
	if(err != EEPROM_OK){
		return err;
	}
	if(value == ucData){
		return EEPROM_OK;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	01 c0       	rjmp	.+2      	; 0x252 <EEPROM_update+0x62>
	}
	if(value != ucData){
		return EEPROM_WRITE_FAIL;
	}
	
	return EEPROM_OK;
     250:	80 e0       	ldi	r24, 0x00	; 0
	
}
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	08 95       	ret

00000260 <EEPROM_update_batch>:

uint8_t EEPROM_update_batch(uint16_t uiAddress, void *data,uint16_t len){
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	6c 01       	movw	r12, r24
     272:	7b 01       	movw	r14, r22
     274:	8a 01       	movw	r16, r20
	uint16_t i = 0;
	uint8_t err = EEPROM_OK;
	uint8_t *data_cast = (uint8_t *)data;
	
	for(i = 0; i < len; i++){
     276:	c0 e0       	ldi	r28, 0x00	; 0
     278:	d0 e0       	ldi	r29, 0x00	; 0
     27a:	0c c0       	rjmp	.+24     	; 0x294 <EEPROM_update_batch+0x34>
		err = EEPROM_update(uiAddress + i,data_cast[i]);
     27c:	f7 01       	movw	r30, r14
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	60 81       	ld	r22, Z
     284:	ce 01       	movw	r24, r28
     286:	8c 0d       	add	r24, r12
     288:	9d 1d       	adc	r25, r13
     28a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <EEPROM_update>
		if(err != EEPROM_OK){
     28e:	81 11       	cpse	r24, r1
     290:	05 c0       	rjmp	.+10     	; 0x29c <EEPROM_update_batch+0x3c>
uint8_t EEPROM_update_batch(uint16_t uiAddress, void *data,uint16_t len){
	uint16_t i = 0;
	uint8_t err = EEPROM_OK;
	uint8_t *data_cast = (uint8_t *)data;
	
	for(i = 0; i < len; i++){
     292:	21 96       	adiw	r28, 0x01	; 1
     294:	c0 17       	cp	r28, r16
     296:	d1 07       	cpc	r29, r17
     298:	88 f3       	brcs	.-30     	; 0x27c <EEPROM_update_batch+0x1c>
		if(err != EEPROM_OK){
			return err;
		}
	}

	return EEPROM_OK;
     29a:	80 e0       	ldi	r24, 0x00	; 0
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <EEPROM_read_batch>:


uint8_t EEPROM_read_batch(uint16_t uiAddress, void *data,uint16_t len){
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	6c 01       	movw	r12, r24
     2c0:	7b 01       	movw	r14, r22
     2c2:	8a 01       	movw	r16, r20
	uint16_t i = 0;
	uint8_t err = EEPROM_OK;
	uint8_t *data_cast = (uint8_t *)data;
	
	for(i = 0; i < len; i++){
     2c4:	c0 e0       	ldi	r28, 0x00	; 0
     2c6:	d0 e0       	ldi	r29, 0x00	; 0
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <EEPROM_read_batch+0x32>
		err = EEPROM_read(uiAddress + i,&data_cast[i]);
     2ca:	b7 01       	movw	r22, r14
     2cc:	6c 0f       	add	r22, r28
     2ce:	7d 1f       	adc	r23, r29
     2d0:	ce 01       	movw	r24, r28
     2d2:	8c 0d       	add	r24, r12
     2d4:	9d 1d       	adc	r25, r13
     2d6:	0e 94 cd 00 	call	0x19a	; 0x19a <EEPROM_read>
		if(err != EEPROM_OK){
     2da:	81 11       	cpse	r24, r1
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <EEPROM_read_batch+0x3a>
uint8_t EEPROM_read_batch(uint16_t uiAddress, void *data,uint16_t len){
	uint16_t i = 0;
	uint8_t err = EEPROM_OK;
	uint8_t *data_cast = (uint8_t *)data;
	
	for(i = 0; i < len; i++){
     2de:	21 96       	adiw	r28, 0x01	; 1
     2e0:	c0 17       	cp	r28, r16
     2e2:	d1 07       	cpc	r29, r17
     2e4:	90 f3       	brcs	.-28     	; 0x2ca <EEPROM_read_batch+0x1c>
		if(err != EEPROM_OK){
			return err;
		}
	}

	return EEPROM_OK;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	08 95       	ret

000002fa <gpio_set_pin_level>:

}


void gpio_set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     2fa:	66 23       	and	r22, r22
     2fc:	99 f0       	breq	.+38     	; 0x324 <gpio_set_pin_level+0x2a>
     2fe:	dc 01       	movw	r26, r24
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	a9 01       	movw	r20, r18
     30c:	12 96       	adiw	r26, 0x02	; 2
     30e:	0c 90       	ld	r0, X
     310:	02 c0       	rjmp	.+4      	; 0x316 <gpio_set_pin_level+0x1c>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <gpio_set_pin_level+0x18>
     31a:	ca 01       	movw	r24, r20
     31c:	90 81       	ld	r25, Z
     31e:	89 2b       	or	r24, r25
     320:	80 83       	st	Z, r24
     322:	08 95       	ret
     324:	dc 01       	movw	r26, r24
     326:	ed 91       	ld	r30, X+
     328:	fc 91       	ld	r31, X
     32a:	11 97       	sbiw	r26, 0x01	; 1
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	a9 01       	movw	r20, r18
     332:	12 96       	adiw	r26, 0x02	; 2
     334:	0c 90       	ld	r0, X
     336:	02 c0       	rjmp	.+4      	; 0x33c <gpio_set_pin_level+0x42>
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	0a 94       	dec	r0
     33e:	e2 f7       	brpl	.-8      	; 0x338 <gpio_set_pin_level+0x3e>
     340:	ca 01       	movw	r24, r20
     342:	80 95       	com	r24
     344:	90 81       	ld	r25, Z
     346:	89 23       	and	r24, r25
     348:	80 83       	st	Z, r24
     34a:	08 95       	ret

0000034c <gpio_set_pin_direction>:
     34c:	fc 01       	movw	r30, r24
     34e:	30 81       	ld	r19, Z
     350:	21 81       	ldd	r18, Z+1	; 0x01
     352:	61 30       	cpi	r22, 0x01	; 1
     354:	99 f0       	breq	.+38     	; 0x37c <gpio_set_pin_direction+0x30>
     356:	18 f0       	brcs	.+6      	; 0x35e <gpio_set_pin_direction+0x12>
     358:	62 30       	cpi	r22, 0x02	; 2
     35a:	f1 f0       	breq	.+60     	; 0x398 <gpio_set_pin_direction+0x4c>
     35c:	08 95       	ret
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 80       	ldd	r0, Z+2	; 0x02
     364:	02 c0       	rjmp	.+4      	; 0x36a <gpio_set_pin_direction+0x1e>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <gpio_set_pin_direction+0x1a>
     36e:	e3 2f       	mov	r30, r19
     370:	f2 2f       	mov	r31, r18
     372:	80 95       	com	r24
     374:	92 91       	ld	r25, -Z
     376:	89 23       	and	r24, r25
     378:	80 83       	st	Z, r24
     37a:	08 95       	ret
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 80       	ldd	r0, Z+2	; 0x02
     382:	02 c0       	rjmp	.+4      	; 0x388 <gpio_set_pin_direction+0x3c>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	0a 94       	dec	r0
     38a:	e2 f7       	brpl	.-8      	; 0x384 <gpio_set_pin_direction+0x38>
     38c:	e3 2f       	mov	r30, r19
     38e:	f2 2f       	mov	r31, r18
     390:	92 91       	ld	r25, -Z
     392:	89 2b       	or	r24, r25
     394:	80 83       	st	Z, r24
     396:	08 95       	ret
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	ac 01       	movw	r20, r24
     39e:	02 80       	ldd	r0, Z+2	; 0x02
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <gpio_set_pin_direction+0x5a>
     3a2:	44 0f       	add	r20, r20
     3a4:	55 1f       	adc	r21, r21
     3a6:	0a 94       	dec	r0
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <gpio_set_pin_direction+0x56>
     3aa:	a3 2f       	mov	r26, r19
     3ac:	b2 2f       	mov	r27, r18
     3ae:	40 95       	com	r20
     3b0:	2e 91       	ld	r18, -X
     3b2:	42 23       	and	r20, r18
     3b4:	4c 93       	st	X, r20
     3b6:	a0 81       	ld	r26, Z
     3b8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ba:	02 80       	ldd	r0, Z+2	; 0x02
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <gpio_set_pin_direction+0x76>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <gpio_set_pin_direction+0x72>
     3c6:	80 95       	com	r24
     3c8:	9c 91       	ld	r25, X
     3ca:	89 23       	and	r24, r25
     3cc:	8c 93       	st	X, r24
     3ce:	08 95       	ret

000003d0 <gpio_toggle_pin_level>:
}

void gpio_toggle_pin_level(gpio *GPIOx)

{
	uint8_t *tmp_port = GPIOx->port-2;
     3d0:	dc 01       	movw	r26, r24
     3d2:	ed 91       	ld	r30, X+
     3d4:	fc 91       	ld	r31, X
     3d6:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	12 96       	adiw	r26, 0x02	; 2
     3e0:	0c 90       	ld	r0, X
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <gpio_toggle_pin_level+0x18>
     3e4:	44 0f       	add	r20, r20
     3e6:	55 1f       	adc	r21, r21
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <gpio_toggle_pin_level+0x14>
     3ec:	32 97       	sbiw	r30, 0x02	; 2
     3ee:	40 83       	st	Z, r20
     3f0:	08 95       	ret

000003f2 <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8f 93       	push	r24
	if(SPSR1 & 0x40){
     3fe:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
     402:	86 ff       	sbrs	r24, 6
     404:	04 c0       	rjmp	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
     40c:	03 c0       	rjmp	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}else{
		spi_txrx_done = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
	}
}
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_24>:
static volatile status = 0xF8;
static uint8_t twiReady;


ISR(TWI0_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
	//cli(); // Disable Global Interrupt
	status=TWSR0 & 0xF8; // Get TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
     432:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     436:	88 7f       	andi	r24, 0xF8	; 248
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <status+0x1>
     43e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	switch(status) {
     442:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
     446:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <status+0x1>
     44a:	88 3a       	cpi	r24, 0xA8	; 168
     44c:	91 05       	cpc	r25, r1
     44e:	31 f1       	breq	.+76     	; 0x49c <__vector_24+0x7c>
     450:	3c f4       	brge	.+14     	; 0x460 <__vector_24+0x40>
     452:	80 38       	cpi	r24, 0x80	; 128
     454:	91 05       	cpc	r25, r1
     456:	59 f0       	breq	.+22     	; 0x46e <__vector_24+0x4e>
     458:	80 3a       	cpi	r24, 0xA0	; 160
     45a:	91 05       	cpc	r25, r1
     45c:	c9 f0       	breq	.+50     	; 0x490 <__vector_24+0x70>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <__vector_24+0xc4>
     460:	88 3b       	cpi	r24, 0xB8	; 184
     462:	91 05       	cpc	r25, r1
     464:	61 f1       	breq	.+88     	; 0x4be <__vector_24+0x9e>
     466:	80 3c       	cpi	r24, 0xC0	; 192
     468:	91 05       	cpc	r25, r1
     46a:	d1 f1       	breq	.+116    	; 0x4e0 <__vector_24+0xc0>
     46c:	3b c0       	rjmp	.+118    	; 0x4e4 <__vector_24+0xc4>
		case TW_SR_SLA_ACK:	// 0x60: SLA+W received, ACK returned
			break;
		case TW_SR_DATA_ACK:	// 0x80: data received, ACK returned
			twi_buff[byteIndex] = TWDR0;	// Save data to the register address
     46e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     472:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     476:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     47a:	e8 0f       	add	r30, r24
     47c:	f1 1d       	adc	r31, r1
     47e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     482:	80 83       	st	Z, r24
			byteIndex++;
     484:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     488:	8f 5f       	subi	r24, 0xFF	; 255
     48a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
		break;
     48e:	2a c0       	rjmp	.+84     	; 0x4e4 <__vector_24+0xc4>
			case TW_SR_STOP:	// 0xA0: stop or repeated start condition received while selected
			twiReady = 1;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <twiReady>
			byteIndex = 0;
     496:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <byteIndex>
		break;
     49a:	24 c0       	rjmp	.+72     	; 0x4e4 <__vector_24+0xc4>
			case TW_ST_SLA_ACK:	// 0xA8: SLA+R received, ACK returned {ADDRESS REGISTER or first byte in slave mode}
			TWDR0 = twi_buff[byteIndex];
     49c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     4a0:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     4a4:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     4a8:	e8 0f       	add	r30, r24
     4aa:	f1 1d       	adc	r31, r1
     4ac:	80 81       	ld	r24, Z
     4ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
     4b2:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     4b6:	8f 5f       	subi	r24, 0xFF	; 255
     4b8:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
			break;
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <__vector_24+0xc4>
		case TW_ST_DATA_ACK:	// 0xB8: data transmitted, ACK received
			TWDR0 = twi_buff[byteIndex];
     4be:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     4c2:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     4c6:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     4ca:	e8 0f       	add	r30, r24
     4cc:	f1 1d       	adc	r31, r1
     4ce:	80 81       	ld	r24, Z
     4d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
     4d4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
			break;
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__vector_24+0xc4>
		case TW_ST_DATA_NACK:	// 0xC0: data transmitted, NACK received
			byteIndex = 0;
     4e0:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <byteIndex>
		case TW_BUS_ERROR:	// 0x00: illegal start or stop condition
			break;
		default:
			break;
	}
	if (twi_mode){TWCR0 |= (1<<TWINT);}// Clear TWINT Flag
     4e4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <twi_mode>
     4e8:	88 23       	and	r24, r24
     4ea:	29 f0       	breq	.+10     	; 0x4f6 <__vector_24+0xd6>
     4ec:	ec eb       	ldi	r30, 0xBC	; 188
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	80 68       	ori	r24, 0x80	; 128
     4f4:	80 83       	st	Z, r24
	//sei(); // Enable Global Interrupt
}
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <twi1_start>:
	
	
	twi1_stop();
	
	return err;
}
     508:	85 ea       	ldi	r24, 0xA5	; 165
     50a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	05 c0       	rjmp	.+10     	; 0x51e <twi1_start+0x16>
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	80 34       	cpi	r24, 0x40	; 64
     518:	26 e0       	ldi	r18, 0x06	; 6
     51a:	92 07       	cpc	r25, r18
     51c:	48 f4       	brcc	.+18     	; 0x530 <twi1_start+0x28>
     51e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     522:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     526:	28 30       	cpi	r18, 0x08	; 8
     528:	31 05       	cpc	r19, r1
     52a:	a1 f7       	brne	.-24     	; 0x514 <twi1_start+0xc>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	08 95       	ret

00000534 <twi1_stop>:
     534:	85 e9       	ldi	r24, 0x95	; 149
     536:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     53a:	08 95       	ret

0000053c <twi1_restart>:
     53c:	85 ea       	ldi	r24, 0xA5	; 165
     53e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	05 c0       	rjmp	.+10     	; 0x552 <twi1_restart+0x16>
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	80 34       	cpi	r24, 0x40	; 64
     54c:	26 e0       	ldi	r18, 0x06	; 6
     54e:	92 07       	cpc	r25, r18
     550:	48 f4       	brcc	.+18     	; 0x564 <twi1_restart+0x28>
     552:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     556:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     55a:	20 31       	cpi	r18, 0x10	; 16
     55c:	31 05       	cpc	r19, r1
     55e:	a1 f7       	brne	.-24     	; 0x548 <twi1_restart+0xc>
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	08 95       	ret
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	08 95       	ret

00000568 <twi1_addr_write_ack>:
     568:	85 e8       	ldi	r24, 0x85	; 133
     56a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	05 c0       	rjmp	.+10     	; 0x57e <twi1_addr_write_ack+0x16>
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	80 34       	cpi	r24, 0x40	; 64
     578:	26 e0       	ldi	r18, 0x06	; 6
     57a:	92 07       	cpc	r25, r18
     57c:	48 f4       	brcc	.+18     	; 0x590 <twi1_addr_write_ack+0x28>
     57e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     582:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     586:	28 31       	cpi	r18, 0x18	; 24
     588:	31 05       	cpc	r19, r1
     58a:	a1 f7       	brne	.-24     	; 0x574 <twi1_addr_write_ack+0xc>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	08 95       	ret
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	08 95       	ret

00000594 <twi1_data_write_ack>:
     594:	85 e8       	ldi	r24, 0x85	; 133
     596:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <twi1_data_write_ack+0x16>
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	80 34       	cpi	r24, 0x40	; 64
     5a4:	26 e0       	ldi	r18, 0x06	; 6
     5a6:	92 07       	cpc	r25, r18
     5a8:	48 f4       	brcc	.+18     	; 0x5bc <twi1_data_write_ack+0x28>
     5aa:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5ae:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     5b2:	28 32       	cpi	r18, 0x28	; 40
     5b4:	31 05       	cpc	r19, r1
     5b6:	a1 f7       	brne	.-24     	; 0x5a0 <twi1_data_write_ack+0xc>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	08 95       	ret
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	08 95       	ret

000005c0 <twi1_addr_read_ack>:
     5c0:	85 e8       	ldi	r24, 0x85	; 133
     5c2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <twi1_addr_read_ack+0x16>
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	80 34       	cpi	r24, 0x40	; 64
     5d0:	26 e0       	ldi	r18, 0x06	; 6
     5d2:	92 07       	cpc	r25, r18
     5d4:	48 f4       	brcc	.+18     	; 0x5e8 <twi1_addr_read_ack+0x28>
     5d6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     5da:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     5de:	20 34       	cpi	r18, 0x40	; 64
     5e0:	31 05       	cpc	r19, r1
     5e2:	a1 f7       	brne	.-24     	; 0x5cc <twi1_addr_read_ack+0xc>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	08 95       	ret

000005ec <twi1_data_read_ack>:
     5ec:	88 23       	and	r24, r24
     5ee:	a1 f0       	breq	.+40     	; 0x618 <twi1_data_read_ack+0x2c>
     5f0:	85 ec       	ldi	r24, 0xC5	; 197
     5f2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <twi1_data_read_ack+0x1a>
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	26 e0       	ldi	r18, 0x06	; 6
     602:	92 07       	cpc	r25, r18
     604:	e8 f4       	brcc	.+58     	; 0x640 <twi1_data_read_ack+0x54>
     606:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     60a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     60e:	20 35       	cpi	r18, 0x50	; 80
     610:	31 05       	cpc	r19, r1
     612:	a1 f7       	brne	.-24     	; 0x5fc <twi1_data_read_ack+0x10>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	08 95       	ret
     618:	85 e8       	ldi	r24, 0x85	; 133
     61a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	05 c0       	rjmp	.+10     	; 0x62e <twi1_data_read_ack+0x42>
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	26 e0       	ldi	r18, 0x06	; 6
     62a:	92 07       	cpc	r25, r18
     62c:	58 f4       	brcc	.+22     	; 0x644 <twi1_data_read_ack+0x58>
     62e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <status>
     632:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <status+0x1>
     636:	28 35       	cpi	r18, 0x58	; 88
     638:	31 05       	cpc	r19, r1
     63a:	a1 f7       	brne	.-24     	; 0x624 <twi1_data_read_ack+0x38>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	08 95       	ret

00000648 <__vector_40>:
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
     65a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     65e:	88 7f       	andi	r24, 0xF8	; 248
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <status+0x1>
     666:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
     66a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     66e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <status+0x1>
     672:	88 3a       	cpi	r24, 0xA8	; 168
     674:	91 05       	cpc	r25, r1
     676:	31 f1       	breq	.+76     	; 0x6c4 <__vector_40+0x7c>
     678:	3c f4       	brge	.+14     	; 0x688 <__vector_40+0x40>
     67a:	80 38       	cpi	r24, 0x80	; 128
     67c:	91 05       	cpc	r25, r1
     67e:	59 f0       	breq	.+22     	; 0x696 <__vector_40+0x4e>
     680:	80 3a       	cpi	r24, 0xA0	; 160
     682:	91 05       	cpc	r25, r1
     684:	c9 f0       	breq	.+50     	; 0x6b8 <__vector_40+0x70>
     686:	42 c0       	rjmp	.+132    	; 0x70c <__vector_40+0xc4>
     688:	88 3b       	cpi	r24, 0xB8	; 184
     68a:	91 05       	cpc	r25, r1
     68c:	61 f1       	breq	.+88     	; 0x6e6 <__vector_40+0x9e>
     68e:	80 3c       	cpi	r24, 0xC0	; 192
     690:	91 05       	cpc	r25, r1
     692:	d1 f1       	breq	.+116    	; 0x708 <__vector_40+0xc0>
     694:	3b c0       	rjmp	.+118    	; 0x70c <__vector_40+0xc4>
     696:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     69a:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     69e:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     6a2:	e8 0f       	add	r30, r24
     6a4:	f1 1d       	adc	r31, r1
     6a6:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     6aa:	80 83       	st	Z, r24
     6ac:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
     6b6:	2a c0       	rjmp	.+84     	; 0x70c <__vector_40+0xc4>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <twiReady>
     6be:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <byteIndex>
     6c2:	24 c0       	rjmp	.+72     	; 0x70c <__vector_40+0xc4>
     6c4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     6c8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     6cc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	80 81       	ld	r24, Z
     6d6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     6da:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     6de:	8f 5f       	subi	r24, 0xFF	; 255
     6e0:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
     6e4:	13 c0       	rjmp	.+38     	; 0x70c <__vector_40+0xc4>
     6e6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     6ea:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <twi_buff>
     6ee:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <twi_buff+0x1>
     6f2:	e8 0f       	add	r30, r24
     6f4:	f1 1d       	adc	r31, r1
     6f6:	80 81       	ld	r24, Z
     6f8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     6fc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <byteIndex>
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <byteIndex>
     706:	02 c0       	rjmp	.+4      	; 0x70c <__vector_40+0xc4>
     708:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <byteIndex>
     70c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <twi_mode>
     710:	88 23       	and	r24, r24
     712:	29 f0       	breq	.+10     	; 0x71e <__vector_40+0xd6>
     714:	ec ed       	ldi	r30, 0xDC	; 220
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	80 68       	ori	r24, 0x80	; 128
     71c:	80 83       	st	Z, r24
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <twi1_read>:
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	d8 2e       	mov	r13, r24
     740:	c6 2e       	mov	r12, r22
     742:	7a 01       	movw	r14, r20
     744:	89 01       	movw	r16, r18
     746:	0e 94 84 02 	call	0x508	; 0x508 <twi1_start>
     74a:	c8 2f       	mov	r28, r24
     74c:	88 23       	and	r24, r24
     74e:	21 f0       	breq	.+8      	; 0x758 <twi1_read+0x28>
     750:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     754:	8c 2f       	mov	r24, r28
     756:	5f c0       	rjmp	.+190    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     758:	8d 2d       	mov	r24, r13
     75a:	88 0f       	add	r24, r24
     75c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     760:	0e 94 b4 02 	call	0x568	; 0x568 <twi1_addr_write_ack>
     764:	c8 2f       	mov	r28, r24
     766:	88 23       	and	r24, r24
     768:	21 f0       	breq	.+8      	; 0x772 <twi1_read+0x42>
     76a:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     76e:	8c 2f       	mov	r24, r28
     770:	52 c0       	rjmp	.+164    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     772:	c0 92 db 00 	sts	0x00DB, r12	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     776:	0e 94 ca 02 	call	0x594	; 0x594 <twi1_data_write_ack>
     77a:	c8 2f       	mov	r28, r24
     77c:	88 23       	and	r24, r24
     77e:	21 f0       	breq	.+8      	; 0x788 <twi1_read+0x58>
     780:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     784:	8c 2f       	mov	r24, r28
     786:	47 c0       	rjmp	.+142    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     788:	0e 94 9e 02 	call	0x53c	; 0x53c <twi1_restart>
     78c:	c8 2f       	mov	r28, r24
     78e:	88 23       	and	r24, r24
     790:	21 f0       	breq	.+8      	; 0x79a <twi1_read+0x6a>
     792:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     796:	8c 2f       	mov	r24, r28
     798:	3e c0       	rjmp	.+124    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     79a:	8d 2d       	mov	r24, r13
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7a8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <twi1_addr_read_ack>
     7ac:	c8 2f       	mov	r28, r24
     7ae:	88 23       	and	r24, r24
     7b0:	c1 f0       	breq	.+48     	; 0x7e2 <twi1_read+0xb2>
     7b2:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     7b6:	8c 2f       	mov	r24, r28
     7b8:	2e c0       	rjmp	.+92     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <twi1_data_read_ack>
     7c0:	c8 2f       	mov	r28, r24
     7c2:	88 23       	and	r24, r24
     7c4:	21 f0       	breq	.+8      	; 0x7ce <twi1_read+0x9e>
     7c6:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     7ca:	8c 2f       	mov	r24, r28
     7cc:	24 c0       	rjmp	.+72     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7ce:	f7 01       	movw	r30, r14
     7d0:	ec 0d       	add	r30, r12
     7d2:	fd 1d       	adc	r31, r13
     7d4:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     7d8:	80 83       	st	Z, r24
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	c8 1a       	sub	r12, r24
     7de:	d8 0a       	sbc	r13, r24
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <twi1_read+0xb6>
     7e2:	c1 2c       	mov	r12, r1
     7e4:	d1 2c       	mov	r13, r1
     7e6:	c8 01       	movw	r24, r16
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	c8 16       	cp	r12, r24
     7ec:	d9 06       	cpc	r13, r25
     7ee:	28 f3       	brcs	.-54     	; 0x7ba <twi1_read+0x8a>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <twi1_data_read_ack>
     7f6:	c8 2f       	mov	r28, r24
     7f8:	88 23       	and	r24, r24
     7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fc:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     800:	8c 2f       	mov	r24, r28
     802:	09 c0       	rjmp	.+18     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     804:	f7 01       	movw	r30, r14
     806:	ec 0d       	add	r30, r12
     808:	fd 1d       	adc	r31, r13
     80a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     80e:	80 83       	st	Z, r24
     810:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     814:	8c 2f       	mov	r24, r28
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <twi1_write>:
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	18 2f       	mov	r17, r24
     836:	06 2f       	mov	r16, r22
     838:	6a 01       	movw	r12, r20
     83a:	79 01       	movw	r14, r18
     83c:	0e 94 84 02 	call	0x508	; 0x508 <twi1_start>
     840:	c8 2f       	mov	r28, r24
     842:	88 23       	and	r24, r24
     844:	21 f0       	breq	.+8      	; 0x84e <twi1_write+0x28>
     846:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     84a:	8c 2f       	mov	r24, r28
     84c:	31 c0       	rjmp	.+98     	; 0x8b0 <twi1_write+0x8a>
     84e:	11 0f       	add	r17, r17
     850:	10 93 db 00 	sts	0x00DB, r17	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     854:	0e 94 b4 02 	call	0x568	; 0x568 <twi1_addr_write_ack>
     858:	c8 2f       	mov	r28, r24
     85a:	88 23       	and	r24, r24
     85c:	21 f0       	breq	.+8      	; 0x866 <twi1_write+0x40>
     85e:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     862:	8c 2f       	mov	r24, r28
     864:	25 c0       	rjmp	.+74     	; 0x8b0 <twi1_write+0x8a>
     866:	00 93 db 00 	sts	0x00DB, r16	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     86a:	0e 94 ca 02 	call	0x594	; 0x594 <twi1_data_write_ack>
     86e:	c8 2f       	mov	r28, r24
     870:	88 23       	and	r24, r24
     872:	b1 f0       	breq	.+44     	; 0x8a0 <twi1_write+0x7a>
     874:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     878:	8c 2f       	mov	r24, r28
     87a:	1a c0       	rjmp	.+52     	; 0x8b0 <twi1_write+0x8a>
     87c:	f6 01       	movw	r30, r12
     87e:	e0 0f       	add	r30, r16
     880:	f1 1f       	adc	r31, r17
     882:	80 81       	ld	r24, Z
     884:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     888:	0e 94 ca 02 	call	0x594	; 0x594 <twi1_data_write_ack>
     88c:	c8 2f       	mov	r28, r24
     88e:	88 23       	and	r24, r24
     890:	21 f0       	breq	.+8      	; 0x89a <twi1_write+0x74>
     892:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     896:	8c 2f       	mov	r24, r28
     898:	0b c0       	rjmp	.+22     	; 0x8b0 <twi1_write+0x8a>
     89a:	0f 5f       	subi	r16, 0xFF	; 255
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <twi1_write+0x7e>
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	0e 15       	cp	r16, r14
     8a6:	1f 05       	cpc	r17, r15
     8a8:	48 f3       	brcs	.-46     	; 0x87c <twi1_write+0x56>
     8aa:	0e 94 9a 02 	call	0x534	; 0x534 <twi1_stop>
     8ae:	8c 2f       	mov	r24, r28
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	08 95       	ret

000008c0 <twi1_init>:




void twi1_init(uint32_t speed){
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
	twi_mode = 0;
     8c4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <twi_mode>
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	74 e2       	ldi	r23, 0x24	; 36
     8cc:	84 ef       	ldi	r24, 0xF4	; 244
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     8d4:	da 01       	movw	r26, r20
     8d6:	c9 01       	movw	r24, r18
     8d8:	40 97       	sbiw	r24, 0x10	; 16
     8da:	a1 09       	sbc	r26, r1
     8dc:	b1 09       	sbc	r27, r1
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
	TWBR1 = gen_t & 0xFF;
     8e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	TWCR1 = (1 << TWEN) | (1 << TWIE);
     8ea:	85 e0       	ldi	r24, 0x05	; 5
     8ec:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
     8f0:	08 95       	ret

000008f2 <getKey>:
const char* serial_read_data(void){
	//uint8_t serial_read_data(void){
	read_complete = false;
	rx_count=0;
	return test_array;
}
     8f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <read_complete>
     8f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <keyCode>
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <keyCode>
     900:	08 95       	ret

00000902 <__vector_18>:




ISR(USART0_RX_vect){
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
	tmpkeyChar = UDR0;
     910:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     914:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <tmpkeyChar>
	if (tmpkeyChar != 0xCC){
     918:	8c 3c       	cpi	r24, 0xCC	; 204
     91a:	31 f0       	breq	.+12     	; 0x928 <__vector_18+0x26>
		read_complete = true;
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <read_complete>
		keyCode = tmpkeyChar;
     922:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <keyCode>
     926:	03 c0       	rjmp	.+6      	; 0x92e <__vector_18+0x2c>
	}else{
		screenReady = true;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <screenReady>
	}	
}
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_20>:

//memset(rx_buffer, 0, sizeof(rx_buffer));

ISR(USART0_TX_vect){
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	8f 93       	push	r24
	uart_tx_busy = 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uart_tx_busy>
}
     94e:	8f 91       	pop	r24
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <uart_init>:


void uart_init(uint32_t baud,uint8_t high_speed){
	UCSR0B = 0;
     95a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0A = 0;
     95e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	uint8_t speed = 16;
	
	if(high_speed != 0){
     962:	44 23       	and	r20, r20
     964:	39 f0       	breq	.+14     	; 0x974 <uart_init+0x1a>
		speed = 8;
		UCSR0A |= 1 << U2X0;
     966:	e0 ec       	ldi	r30, 0xC0	; 192
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	20 81       	ld	r18, Z
     96c:	22 60       	ori	r18, 0x02	; 2
     96e:	20 83       	st	Z, r18
	UCSR0B = 0;
	UCSR0A = 0;
	uint8_t speed = 16;
	
	if(high_speed != 0){
		speed = 8;
     970:	a8 e0       	ldi	r26, 0x08	; 8
     972:	01 c0       	rjmp	.+2      	; 0x976 <uart_init+0x1c>


void uart_init(uint32_t baud,uint8_t high_speed){
	UCSR0B = 0;
	UCSR0A = 0;
	uint8_t speed = 16;
     974:	a0 e1       	ldi	r26, 0x10	; 16
	if(high_speed != 0){
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	0e 94 19 09 	call	0x1232	; 0x1232 <__muluhisi3>
     980:	9b 01       	movw	r18, r22
     982:	ac 01       	movw	r20, r24
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	74 e2       	ldi	r23, 0x24	; 36
     988:	84 ef       	ldi	r24, 0xF4	; 244
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     990:	ba 01       	movw	r22, r20
     992:	a9 01       	movw	r20, r18
     994:	41 50       	subi	r20, 0x01	; 1
     996:	51 09       	sbc	r21, r1
     998:	61 09       	sbc	r22, r1
     99a:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0x0F00) >> 8;
     99c:	db 01       	movw	r26, r22
     99e:	ca 01       	movw	r24, r20
     9a0:	88 27       	eor	r24, r24
     9a2:	9f 70       	andi	r25, 0x0F	; 15
     9a4:	aa 27       	eor	r26, r26
     9a6:	bb 27       	eor	r27, r27
     9a8:	89 2f       	mov	r24, r25
     9aa:	9a 2f       	mov	r25, r26
     9ac:	ab 2f       	mov	r26, r27
     9ae:	bb 27       	eor	r27, r27
     9b0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
     9b4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
     9b8:	e1 ec       	ldi	r30, 0xC1	; 193
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	88 6d       	ori	r24, 0xD8	; 216
     9c0:	80 83       	st	Z, r24
	UCSR0C=0b10000110;
     9c2:	86 e8       	ldi	r24, 0x86	; 134
     9c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     9c8:	08 95       	ret

000009ca <uart_send_byte>:
}



void uart_send_byte(uint8_t c){
	while(uart_tx_busy == 0);
     9ca:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <uart_tx_busy>
     9ce:	99 23       	and	r25, r25
     9d0:	e1 f3       	breq	.-8      	; 0x9ca <uart_send_byte>
	uart_tx_busy = 0;
     9d2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <uart_tx_busy>
	UDR0 = c;
     9d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9da:	08 95       	ret

000009dc <uart_send_array>:
}

void uart_send_array(uint8_t *c,uint16_t len){
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	7c 01       	movw	r14, r24
     9ea:	8b 01       	movw	r16, r22
	screenReady = false;
     9ec:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <screenReady>
	for(uint16_t i = 0; i < len;i++){
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <uart_send_array+0x28>
		uart_send_byte(c[i]);
     9f6:	f7 01       	movw	r30, r14
     9f8:	ec 0f       	add	r30, r28
     9fa:	fd 1f       	adc	r31, r29
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	UDR0 = c;
}

void uart_send_array(uint8_t *c,uint16_t len){
	screenReady = false;
	for(uint16_t i = 0; i < len;i++){
     a02:	21 96       	adiw	r28, 0x01	; 1
     a04:	c0 17       	cp	r28, r16
     a06:	d1 07       	cpc	r29, r17
     a08:	b0 f3       	brcs	.-20     	; 0x9f6 <uart_send_array+0x1a>
		uart_send_byte(c[i]);
	}
	while(screenReady == false);
     a0a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <screenReady>
     a0e:	88 23       	and	r24, r24
     a10:	e1 f3       	breq	.-8      	; 0xa0a <uart_send_array+0x2e>
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	08 95       	ret

00000a20 <uart_send_array_simple>:

void uart_send_array_simple(uint8_t *c,uint16_t len){
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	7c 01       	movw	r14, r24
     a2e:	8b 01       	movw	r16, r22
	for(uint16_t i = 0; i < len;i++){
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	d0 e0       	ldi	r29, 0x00	; 0
     a34:	07 c0       	rjmp	.+14     	; 0xa44 <uart_send_array_simple+0x24>
		uart_send_byte(c[i]);
     a36:	f7 01       	movw	r30, r14
     a38:	ec 0f       	add	r30, r28
     a3a:	fd 1f       	adc	r31, r29
     a3c:	80 81       	ld	r24, Z
     a3e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	}
	while(screenReady == false);
}

void uart_send_array_simple(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
     a42:	21 96       	adiw	r28, 0x01	; 1
     a44:	c0 17       	cp	r28, r16
     a46:	d1 07       	cpc	r29, r17
     a48:	b0 f3       	brcs	.-20     	; 0xa36 <uart_send_array_simple+0x16>
     a4a:	2f e7       	ldi	r18, 0x7F	; 127
     a4c:	88 e3       	ldi	r24, 0x38	; 56
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <uart_send_array_simple+0x30>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <uart_send_array_simple+0x3a>
     a5a:	00 00       	nop
		uart_send_byte(c[i]);
	}
	_delay_ms(25);
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	08 95       	ret

00000a6a <screenInit>:




void screenInit(void){
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	60 97       	sbiw	r28, 0x10	; 16
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
		uart_init(9600,1);
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	60 e8       	ldi	r22, 0x80	; 128
     a86:	75 e2       	ldi	r23, 0x25	; 37
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 ad 04 	call	0x95a	; 0x95a <uart_init>
		uart_send_array_simple((uint8_t *)init0, sizeof(init0));
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	8c e0       	ldi	r24, 0x0C	; 12
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 10 05 	call	0xa20	; 0xa20 <uart_send_array_simple>
     a9c:	8f eb       	ldi	r24, 0xBF	; 191
     a9e:	9d e5       	ldi	r25, 0x5D	; 93
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <screenInit+0x36>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <screenInit+0x3c>
     aa6:	00 00       	nop
		_delay_ms(6);
		uart_init(74880,1);
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	60 e8       	ldi	r22, 0x80	; 128
     aac:	74 e2       	ldi	r23, 0x24	; 36
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 ad 04 	call	0x95a	; 0x95a <uart_init>
		uart_send_array_simple((uint8_t *)init1, sizeof(init1));
     ab6:	62 e0       	ldi	r22, 0x02	; 2
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 10 05 	call	0xa20	; 0xa20 <uart_send_array_simple>
     ac2:	ef e9       	ldi	r30, 0x9F	; 159
     ac4:	ff e0       	ldi	r31, 0x0F	; 15
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <screenInit+0x5c>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <screenInit+0x62>
     acc:	00 00       	nop
		_delay_ms(1);
		uart_send_array_simple((uint8_t *)init2, sizeof(init2));
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 10 05 	call	0xa20	; 0xa20 <uart_send_array_simple>
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	9c e9       	ldi	r25, 0x9C	; 156
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <screenInit+0x74>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <screenInit+0x7a>
     ae4:	00 00       	nop
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	e5 eb       	ldi	r30, 0xB5	; 181
     aea:	f5 e3       	ldi	r31, 0x35	; 53
     aec:	91 50       	subi	r25, 0x01	; 1
     aee:	e0 40       	sbci	r30, 0x00	; 0
     af0:	f0 40       	sbci	r31, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <screenInit+0x82>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <screenInit+0x8c>
     af6:	00 00       	nop
		_delay_ms(10);
		//uart_send_array((uint8_t *)init3, sizeof(init3));
		//_delay_ms(10);
		
		_delay_ms(1100);
		uart_send_byte(0xf4);
     af8:	84 ef       	ldi	r24, 0xF4	; 244
     afa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	81 ee       	ldi	r24, 0xE1	; 225
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	90 40       	sbci	r25, 0x00	; 0
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <screenInit+0x9a>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <screenInit+0xa4>
     b0e:	00 00       	nop
		_delay_ms(100);
		
		uint8_t initData[16] = {0xc7, 0x01, 0x0, 0x0, 0x1e, 0x0, 0x03}; //horisontal line
     b10:	8e 01       	movw	r16, r28
     b12:	0f 5f       	subi	r16, 0xFF	; 255
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	80 e1       	ldi	r24, 0x10	; 16
     b18:	f8 01       	movw	r30, r16
     b1a:	11 92       	st	Z+, r1
     b1c:	8a 95       	dec	r24
     b1e:	e9 f7       	brne	.-6      	; 0xb1a <screenInit+0xb0>
     b20:	87 ec       	ldi	r24, 0xC7	; 199
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	8a 83       	std	Y+2, r24	; 0x02
     b28:	8e e1       	ldi	r24, 0x1E	; 30
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	8f 83       	std	Y+7, r24	; 0x07
		uart_send_array((uint8_t *)initData, 7);
     b30:	67 e0       	ldi	r22, 0x07	; 7
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>
		
		initData[2] = 125;
     b3a:	8d e7       	ldi	r24, 0x7D	; 125
     b3c:	8b 83       	std	Y+3, r24	; 0x03
		uart_send_array((uint8_t *)initData, 7);
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>
     b48:	ff ef       	ldi	r31, 0xFF	; 255
     b4a:	21 ee       	ldi	r18, 0xE1	; 225
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	f1 50       	subi	r31, 0x01	; 1
     b50:	20 40       	sbci	r18, 0x00	; 0
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <screenInit+0xe4>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <screenInit+0xee>
     b58:	00 00       	nop
		//uint8_t initData1[6] = {0xc5, 0x06, 0xea, 0x00, 0x02, 0x74}; //vertical line
		//uart_send_array((uint8_t *)initData1, 6);
		//_delay_ms(10);
		
		
		uart_send_array((uint8_t *)init3, sizeof(init3));
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>
     b66:	ef e3       	ldi	r30, 0x3F	; 63
     b68:	fc e9       	ldi	r31, 0x9C	; 156
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <screenInit+0x100>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <screenInit+0x106>
     b70:	00 00       	nop
		_delay_ms(10);

}
     b72:	60 96       	adiw	r28, 0x10	; 16
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	08 95       	ret

00000b88 <screenKeepAlive>:

void screenKeepAlive(void){
	uart_send_array_simple((uint8_t *)init2, sizeof(init2));
     b88:	62 e0       	ldi	r22, 0x02	; 2
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 10 05 	call	0xa20	; 0xa20 <uart_send_array_simple>
     b94:	8f e3       	ldi	r24, 0x3F	; 63
     b96:	9c e9       	ldi	r25, 0x9C	; 156
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <screenKeepAlive+0x10>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <screenKeepAlive+0x16>
     b9e:	00 00       	nop
     ba0:	08 95       	ret

00000ba2 <screenPrintString>:
	_delay_ms(10);
}

void screenPrintString(uint8_t xPox, uint8_t yPox, uint8_t *c, uint8_t selectType){
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	27 97       	sbiw	r28, 0x07	; 7
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	d8 2e       	mov	r13, r24
     bc6:	c6 2e       	mov	r12, r22
     bc8:	7a 01       	movw	r14, r20
     bca:	b2 2e       	mov	r11, r18
	//if(selectType == 0 || selectType == 1){
		//uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, 10, 0x06, 16};
		//uart_send_array((uint8_t *)tmp, sizeof(tmp));
	//}
	screenReady = false;
     bcc:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <screenReady>
	uint16_t i = 0;
		
	uart_send_byte(0xeb); //0xeb
     bd0:	8b ee       	ldi	r24, 0xEB	; 235
     bd2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	uart_send_byte(yPox); //0x20
     bd6:	8c 2d       	mov	r24, r12
     bd8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	uart_send_byte(xPox); //0x0c
     bdc:	8d 2d       	mov	r24, r13
     bde:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	//if(selectType == 0 || selectType == 1){
		//uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, 10, 0x06, 16};
		//uart_send_array((uint8_t *)tmp, sizeof(tmp));
	//}
	screenReady = false;
	uint16_t i = 0;
     be2:	00 e0       	ldi	r16, 0x00	; 0
     be4:	10 e0       	ldi	r17, 0x00	; 0
	uart_send_byte(0xeb); //0xeb
	uart_send_byte(yPox); //0x20
	uart_send_byte(xPox); //0x0c
	
	do{
		uart_send_byte(c[i]);
     be6:	f7 01       	movw	r30, r14
     be8:	e0 0f       	add	r30, r16
     bea:	f1 1f       	adc	r31, r17
     bec:	80 81       	ld	r24, Z
     bee:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
		i++;
     bf2:	0f 5f       	subi	r16, 0xFF	; 255
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
	}while(c[i] != '\0');
     bf6:	f7 01       	movw	r30, r14
     bf8:	e0 0f       	add	r30, r16
     bfa:	f1 1f       	adc	r31, r17
     bfc:	80 81       	ld	r24, Z
     bfe:	81 11       	cpse	r24, r1
     c00:	f2 cf       	rjmp	.-28     	; 0xbe6 <screenPrintString+0x44>
	uart_send_byte(' ');
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	uart_send_byte(0x0);
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_send_byte>
	while(screenReady == false);
     c0e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <screenReady>
     c12:	88 23       	and	r24, r24
     c14:	e1 f3       	breq	.-8      	; 0xc0e <screenPrintString+0x6c>
	if(selectType == 2){
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	b8 12       	cpse	r11, r24
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <screenPrintString+0xa8>
		uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, strlen((char *)c), 0x06, 16};
     c1c:	87 ec       	ldi	r24, 0xC7	; 199
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	ba 82       	std	Y+2, r11	; 0x02
     c22:	cb 82       	std	Y+3, r12	; 0x03
     c24:	dc 82       	std	Y+4, r13	; 0x04
     c26:	f7 01       	movw	r30, r14
     c28:	01 90       	ld	r0, Z+
     c2a:	00 20       	and	r0, r0
     c2c:	e9 f7       	brne	.-6      	; 0xc28 <screenPrintString+0x86>
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	ee 19       	sub	r30, r14
     c32:	ff 09       	sbc	r31, r15
     c34:	ed 83       	std	Y+5, r30	; 0x05
     c36:	86 e0       	ldi	r24, 0x06	; 6
     c38:	8e 83       	std	Y+6, r24	; 0x06
     c3a:	80 e1       	ldi	r24, 0x10	; 16
     c3c:	8f 83       	std	Y+7, r24	; 0x07
		uart_send_array((uint8_t *)tmp, sizeof(tmp));
     c3e:	67 e0       	ldi	r22, 0x07	; 7
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>
	}
	
}
     c4a:	27 96       	adiw	r28, 0x07	; 7
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	08 95       	ret

00000c6a <screenVerticalBar>:



void screenVerticalBar(uint8_t xPox, uint8_t yPox, uint8_t barVal, uint8_t maxHeight){
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2a 97       	sbiw	r28, 0x0a	; 10
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	e6 2e       	mov	r14, r22
     c88:	f4 2e       	mov	r15, r20
     c8a:	02 2f       	mov	r16, r18
	
	uint8_t barProgVertical[10] = {0xfd,0x3c,xPox,0x05,0x01,0xff,0xff,0xff,0xff,0xff};
     c8c:	9d ef       	ldi	r25, 0xFD	; 253
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	9c e3       	ldi	r25, 0x3C	; 60
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	8c 83       	std	Y+4, r24	; 0x04
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	8d 83       	std	Y+5, r24	; 0x05
	for (uint8_t i=maxHeight; i>0; i-- ){				
     c9e:	12 2f       	mov	r17, r18
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <screenVerticalBar+0x6e>
		
		barProgVertical[1] = (yPox + maxHeight) - i;
     ca2:	80 2f       	mov	r24, r16
     ca4:	8e 0d       	add	r24, r14
     ca6:	81 1b       	sub	r24, r17
     ca8:	8a 83       	std	Y+2, r24	; 0x02
		
		if(i<=barVal){
     caa:	f1 16       	cp	r15, r17
     cac:	38 f0       	brcs	.+14     	; 0xcbc <screenVerticalBar+0x52>
			barProgVertical[5] = 0xff;
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	8e 83       	std	Y+6, r24	; 0x06
			barProgVertical[6] = 0xff;
     cb2:	8f 83       	std	Y+7, r24	; 0x07
			barProgVertical[7] = 0xff;
     cb4:	88 87       	std	Y+8, r24	; 0x08
			barProgVertical[8] = 0xff;
     cb6:	89 87       	std	Y+9, r24	; 0x09
			barProgVertical[9] = 0xff;
     cb8:	8a 87       	std	Y+10, r24	; 0x0a
     cba:	07 c0       	rjmp	.+14     	; 0xcca <screenVerticalBar+0x60>
			}else{
			barProgVertical[5] = 0x80;
     cbc:	80 e8       	ldi	r24, 0x80	; 128
     cbe:	8e 83       	std	Y+6, r24	; 0x06
			barProgVertical[6] = 0x0;
     cc0:	1f 82       	std	Y+7, r1	; 0x07
			barProgVertical[7] = 0x0;
     cc2:	18 86       	std	Y+8, r1	; 0x08
			barProgVertical[8] = 0x0;
     cc4:	19 86       	std	Y+9, r1	; 0x09
			barProgVertical[9] = 0x01;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8a 87       	std	Y+10, r24	; 0x0a
		}
		uart_send_array(barProgVertical, sizeof(barProgVertical));
     cca:	6a e0       	ldi	r22, 0x0A	; 10
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>


void screenVerticalBar(uint8_t xPox, uint8_t yPox, uint8_t barVal, uint8_t maxHeight){
	
	uint8_t barProgVertical[10] = {0xfd,0x3c,xPox,0x05,0x01,0xff,0xff,0xff,0xff,0xff};
	for (uint8_t i=maxHeight; i>0; i-- ){				
     cd6:	11 50       	subi	r17, 0x01	; 1
     cd8:	11 11       	cpse	r17, r1
     cda:	e3 cf       	rjmp	.-58     	; 0xca2 <screenVerticalBar+0x38>
			barProgVertical[9] = 0x01;
		}
		uart_send_array(barProgVertical, sizeof(barProgVertical));
		
	}
	barProgVertical[5] = 0xff;
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	8e 83       	std	Y+6, r24	; 0x06
	barProgVertical[6] = 0xff;
     ce0:	8f 83       	std	Y+7, r24	; 0x07
	barProgVertical[7] = 0xff;
     ce2:	88 87       	std	Y+8, r24	; 0x08
	barProgVertical[8] = 0xff;
     ce4:	89 87       	std	Y+9, r24	; 0x09
	barProgVertical[9] = 0xff;
     ce6:	8a 87       	std	Y+10, r24	; 0x0a
	uart_send_array(barProgVertical, sizeof(barProgVertical));
     ce8:	6a e0       	ldi	r22, 0x0A	; 10
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart_send_array>
}
     cf4:	2a 96       	adiw	r28, 0x0a	; 10
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <main>:

//uint8_t initData[16];
int main(void)
{
    //char char_array[128]="test_data\0";
    twi1_init(400000);
     d0e:	60 e8       	ldi	r22, 0x80	; 128
     d10:	7a e1       	ldi	r23, 0x1A	; 26
     d12:	86 e0       	ldi	r24, 0x06	; 6
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 60 04 	call	0x8c0	; 0x8c0 <twi1_init>
    
    
    gpio_set_pin_direction(&dev1[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev1[RED], true);
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	83 e2       	ldi	r24, 0x23	; 35
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	83 e2       	ldi	r24, 0x23	; 35
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    gpio_set_pin_direction(&dev1[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev1[GREEN], true);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	86 e2       	ldi	r24, 0x26	; 38
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	86 e2       	ldi	r24, 0x26	; 38
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    
    gpio_set_pin_direction(&dev2[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev2[RED], true);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	8a e1       	ldi	r24, 0x1A	; 26
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	8a e1       	ldi	r24, 0x1A	; 26
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    gpio_set_pin_direction(&dev2[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev2[GREEN], true);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	8d e1       	ldi	r24, 0x1D	; 29
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	8d e1       	ldi	r24, 0x1D	; 29
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    
    gpio_set_pin_direction(&dev3[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[RED], true);
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	81 e1       	ldi	r24, 0x11	; 17
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	81 e1       	ldi	r24, 0x11	; 17
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    gpio_set_pin_direction(&dev3[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[GREEN], true);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	84 e1       	ldi	r24, 0x14	; 20
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	84 e1       	ldi	r24, 0x14	; 20
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
    gpio_set_pin_direction(&dev3[BLUE] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[BLUE], true);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	87 e1       	ldi	r24, 0x17	; 23
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 a6 01 	call	0x34c	; 0x34c <gpio_set_pin_direction>
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	87 e1       	ldi	r24, 0x17	; 23
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gpio_set_pin_level>
	
	EEPROM_read_batch(0, &callValues, sizeof(callValues));
     da6:	44 e0       	ldi	r20, 0x04	; 4
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	66 ec       	ldi	r22, 0xC6	; 198
     dac:	71 e0       	ldi	r23, 0x01	; 1
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 57 01 	call	0x2ae	; 0x2ae <EEPROM_read_batch>
	
	
	sei();
     db6:	78 94       	sei
	stdout = &mystdout;
     db8:	89 e2       	ldi	r24, 0x29	; 41
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__iob+0x3>
     dc0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__iob+0x2>
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
     dc6:	39 e6       	ldi	r19, 0x69	; 105
     dc8:	88 e1       	ldi	r24, 0x18	; 24
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	30 40       	sbci	r19, 0x00	; 0
     dce:	80 40       	sbci	r24, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <main+0xbc>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0xc6>
     dd4:	00 00       	nop
	_delay_ms(500);
	screenInit();
     dd6:	0e 94 35 05 	call	0xa6a	; 0xa6a <screenInit>
	screenPrintString(75, 0x03, (uint8_t *)"SW ver 0.1a", 0);
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	47 e3       	ldi	r20, 0x37	; 55
     dde:	51 e0       	ldi	r21, 0x01	; 1
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	8b e4       	ldi	r24, 0x4B	; 75
     de4:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>

	while (1) 
    {
		gpio_toggle_pin_level(&dev3[BLUE]);
     de8:	87 e1       	ldi	r24, 0x17	; 23
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <gpio_toggle_pin_level>
		
		if(serial_complete){
			uint8_t key = getKey();
     df0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <getKey>
			if(key == 0x00){
				//gpio_toggle_pin_level(&dev1[RED]);	
			}
			if(key == 0x01){
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <main+0x112>
				//gpio_toggle_pin_level(&dev1[GREEN]);
				if(currentScr == mainScreen){
     df8:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <currentScr>
     dfc:	91 11       	cpse	r25, r1
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <main+0x100>
					if(menuPointer < 3){
     e00:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <menuPointer>
     e04:	23 30       	cpi	r18, 0x03	; 3
     e06:	18 f4       	brcc	.+6      	; 0xe0e <main+0x100>
						menuPointer++;
     e08:	2f 5f       	subi	r18, 0xFF	; 255
     e0a:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <menuPointer>
					}
				}
				if(currentScr == setupScreen){
     e0e:	91 30       	cpi	r25, 0x01	; 1
     e10:	39 f4       	brne	.+14     	; 0xe20 <main+0x112>
					if(menuPointer < 5){
     e12:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menuPointer>
     e16:	95 30       	cpi	r25, 0x05	; 5
     e18:	18 f4       	brcc	.+6      	; 0xe20 <main+0x112>
						menuPointer++;
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <menuPointer>
					}
				}
				
			}
			if(key == 0x02){
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	39 f4       	brne	.+14     	; 0xe32 <main+0x124>
				//gpio_toggle_pin_level(&dev2[RED]);
				if(menuPointer != 0){
     e24:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <menuPointer>
     e28:	99 23       	and	r25, r25
     e2a:	19 f0       	breq	.+6      	; 0xe32 <main+0x124>
					menuPointer--;
     e2c:	91 50       	subi	r25, 0x01	; 1
     e2e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <menuPointer>
				}
			}
			if(key == 0x03){
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	09 f0       	breq	.+2      	; 0xe38 <main+0x12a>
     e36:	57 c0       	rjmp	.+174    	; 0xee6 <main+0x1d8>
				//gpio_toggle_pin_level(&dev2[GREEN]);
				
				if(currentScr == mainScreen){
     e38:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <currentScr>
     e3c:	81 11       	cpse	r24, r1
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <main+0x150>
					if(menuPointer == 3){
     e40:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	59 f4       	brne	.+22     	; 0xe5e <main+0x150>
						currentScr = setupScreen;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <currentScr>
						menuPointer = 0;
     e4e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <menuPointer>
						valve1 = false;
     e52:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <valve1>
						valve2 = false;
     e56:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <valve2>
						pump = false;
     e5a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <pump>
					}
					
				}
				
				if(currentScr == setupScreen){
     e5e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <currentScr>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <main+0x15a>
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <main+0x1d8>
					
					if(menuPointer == 1){
     e68:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	31 f4       	brne	.+12     	; 0xe7c <main+0x16e>
						valve1 =! valve1;
     e70:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <valve1>
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	92 27       	eor	r25, r18
     e78:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <valve1>
					}
					
					if(menuPointer == 2){
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	31 f4       	brne	.+12     	; 0xe8c <main+0x17e>
						valve2 =! valve2;
     e80:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <valve2>
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	92 27       	eor	r25, r18
     e88:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <valve2>
					}
					
					if(menuPointer == 3){
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	31 f4       	brne	.+12     	; 0xe9c <main+0x18e>
						pump =! pump;
     e90:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <pump>
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	92 27       	eor	r25, r18
     e98:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <pump>
					}
					
					if(menuPointer == 4){
     e9c:	84 30       	cpi	r24, 0x04	; 4
     e9e:	a9 f4       	brne	.+42     	; 0xeca <main+0x1bc>
						
						callValues.LTank = lastAdcValueLeft;
     ea0:	e6 ec       	ldi	r30, 0xC6	; 198
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <lastAdcValueLeft>
     ea8:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <lastAdcValueLeft+0x1>
     eac:	91 83       	std	Z+1, r25	; 0x01
     eae:	80 83       	st	Z, r24
						callValues.RTank = lastAdcValueRight;
     eb0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <lastAdcValueRight>
     eb4:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <lastAdcValueRight+0x1>
     eb8:	93 83       	std	Z+3, r25	; 0x03
     eba:	82 83       	std	Z+2, r24	; 0x02
						EEPROM_update_batch(0, &callValues, sizeof(callValues));
     ebc:	44 e0       	ldi	r20, 0x04	; 4
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	bf 01       	movw	r22, r30
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 30 01 	call	0x260	; 0x260 <EEPROM_update_batch>
					}
					
					
					if(menuPointer == 5){
     eca:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	51 f4       	brne	.+20     	; 0xee6 <main+0x1d8>
						currentScr = mainScreen;
     ed2:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <currentScr>
						menuPointer = 0;
     ed6:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <menuPointer>
						valve1 = false;
     eda:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <valve1>
						valve2 = false;
     ede:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <valve2>
						pump = false;
     ee2:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <pump>
		
		
		
		
	
		int16_t integerPart = adcValLeft / 10;
     ee6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <adcValLeft>
     eea:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcValLeft+0x1>
     eee:	0a e0       	ldi	r16, 0x0A	; 10
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	b8 01       	movw	r22, r16
     ef4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divmodhi4>
     ef8:	f6 2e       	mov	r15, r22
     efa:	e7 2e       	mov	r14, r23
     efc:	d8 2e       	mov	r13, r24
     efe:	c9 2e       	mov	r12, r25
		int16_t decimalPart = adcValLeft % 10;
		sprintf(tankLeft, "%02d.%dL", integerPart, decimalPart);
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	7f 93       	push	r23
     f06:	6f 93       	push	r22
     f08:	c3 e4       	ldi	r28, 0x43	; 67
     f0a:	d1 e0       	ldi	r29, 0x01	; 1
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
		sprintf(measBuffer, "%d.%d", integerPart, decimalPart);
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	8c e4       	ldi	r24, 0x4C	; 76
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	8a ed       	ldi	r24, 0xDA	; 218
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
		
		
		integerPart = adcValRight / 10;
     f38:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <adcValRight>
     f3c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <adcValRight+0x1>
     f40:	b8 01       	movw	r22, r16
     f42:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divmodhi4>
		decimalPart = adcValRight % 10;		
		sprintf(tankRight, "%02d.%dL", integerPart, decimalPart);
     f46:	9f 93       	push	r25
     f48:	8f 93       	push	r24
     f4a:	7f 93       	push	r23
     f4c:	6f 93       	push	r22
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	87 ef       	ldi	r24, 0xF7	; 247
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	9f 93       	push	r25
     f58:	8f 93       	push	r24
     f5a:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
		
		
		
		
		screenPart =! screenPart;
     f5e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <screenPart>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 27       	eor	r24, r25
     f66:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <screenPart>
		if(screenPart){
     f6a:	2d b7       	in	r18, 0x3d	; 61
     f6c:	3e b7       	in	r19, 0x3e	; 62
     f6e:	28 5e       	subi	r18, 0xE8	; 232
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	3e bf       	out	0x3e, r19	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	2d bf       	out	0x3d, r18	; 61
     f7c:	88 23       	and	r24, r24
     f7e:	99 f1       	breq	.+102    	; 0xfe6 <main+0x2d8>
			lastAdcValueLeft = getExtAdc(ADC_ADDR, AIN0AIN1, FSR_0_256);
     f80:	45 e0       	ldi	r20, 0x05	; 5
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	88 e4       	ldi	r24, 0x48	; 72
     f86:	0e 94 88 00 	call	0x110	; 0x110 <getExtAdc>
     f8a:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <lastAdcValueLeft+0x1>
     f8e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <lastAdcValueLeft>
			adcValLeft = lastAdcValueLeft-callValues.LTank;
     f92:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <callValues>
     f96:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <callValues+0x1>
			adcValLeft = (adcValLeft <= 0) ? 0 : adcValLeft;
     f9a:	82 1b       	sub	r24, r18
     f9c:	93 0b       	sbc	r25, r19
     f9e:	12 f4       	brpl	.+4      	; 0xfa4 <main+0x296>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <adcValLeft+0x1>
     fa8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <adcValLeft>
			screenPrintString(3, 6, (uint8_t *)"NEW OIL", 0);
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	42 e5       	ldi	r20, 0x52	; 82
     fb0:	51 e0       	ldi	r21, 0x01	; 1
     fb2:	66 e0       	ldi	r22, 0x06	; 6
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenPrintString(8, 24, (uint8_t *)tankLeft, 0);
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	4f ef       	ldi	r20, 0xFF	; 255
     fbe:	51 e0       	ldi	r21, 0x01	; 1
     fc0:	68 e1       	ldi	r22, 0x18	; 24
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenVerticalBar(8, 44, adcValLeft/3, 80);
     fc8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <adcValLeft>
     fcc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcValLeft+0x1>
     fd0:	63 e0       	ldi	r22, 0x03	; 3
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divmodhi4>
     fd8:	46 2f       	mov	r20, r22
     fda:	20 e5       	ldi	r18, 0x50	; 80
     fdc:	6c e2       	ldi	r22, 0x2C	; 44
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	0e 94 35 06 	call	0xc6a	; 0xc6a <screenVerticalBar>
     fe4:	32 c0       	rjmp	.+100    	; 0x104a <main+0x33c>
			
		}else{
			lastAdcValueRight = getExtAdc(ADC_ADDR, AIN2AIN3, FSR_0_256);
     fe6:	45 e0       	ldi	r20, 0x05	; 5
     fe8:	63 e0       	ldi	r22, 0x03	; 3
     fea:	88 e4       	ldi	r24, 0x48	; 72
     fec:	0e 94 88 00 	call	0x110	; 0x110 <getExtAdc>
     ff0:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <lastAdcValueRight+0x1>
     ff4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <lastAdcValueRight>
			adcValRight = lastAdcValueRight-callValues.RTank;
     ff8:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <callValues+0x2>
     ffc:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <callValues+0x3>
			adcValRight = (adcValRight <= 0) ? 0 : adcValRight;
    1000:	82 1b       	sub	r24, r18
    1002:	93 0b       	sbc	r25, r19
    1004:	12 f4       	brpl	.+4      	; 0x100a <main+0x2fc>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <adcValRight+0x1>
    100e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <adcValRight>
			screenPrintString(184, 6, (uint8_t *)"OLD OIL", 0);
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	4a e5       	ldi	r20, 0x5A	; 90
    1016:	51 e0       	ldi	r21, 0x01	; 1
    1018:	66 e0       	ldi	r22, 0x06	; 6
    101a:	88 eb       	ldi	r24, 0xB8	; 184
    101c:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenPrintString(192, 24, (uint8_t *)tankRight, 0);
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	47 ef       	ldi	r20, 0xF7	; 247
    1024:	51 e0       	ldi	r21, 0x01	; 1
    1026:	68 e1       	ldi	r22, 0x18	; 24
    1028:	80 ec       	ldi	r24, 0xC0	; 192
    102a:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenVerticalBar(192, 44, adcValRight/3, 80);
    102e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <adcValRight>
    1032:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <adcValRight+0x1>
    1036:	63 e0       	ldi	r22, 0x03	; 3
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__divmodhi4>
    103e:	46 2f       	mov	r20, r22
    1040:	20 e5       	ldi	r18, 0x50	; 80
    1042:	6c e2       	ldi	r22, 0x2C	; 44
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	0e 94 35 06 	call	0xc6a	; 0xc6a <screenVerticalBar>
		

		
		
		uint8_t preselect = 0;
		if (currentScr == mainScreen){
    104a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <currentScr>
    104e:	81 11       	cpse	r24, r1
    1050:	35 c0       	rjmp	.+106    	; 0x10bc <main+0x3ae>
			preselect = (menuPointer == 1) ? 2 : 0;
    1052:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	11 f4       	brne	.+4      	; 0x105e <main+0x350>
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <main+0x352>
    105e:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 40, (uint8_t *)"Run cycle", preselect);
    1060:	42 e6       	ldi	r20, 0x62	; 98
    1062:	51 e0       	ldi	r21, 0x01	; 1
    1064:	68 e2       	ldi	r22, 0x28	; 40
    1066:	8b e4       	ldi	r24, 0x4B	; 75
    1068:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			preselect = (menuPointer == 2) ? 2 : 0;
    106c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	11 f4       	brne	.+4      	; 0x1078 <main+0x36a>
    1074:	22 e0       	ldi	r18, 0x02	; 2
    1076:	01 c0       	rjmp	.+2      	; 0x107a <main+0x36c>
    1078:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 57, (uint8_t *)"Empty tank", preselect);
    107a:	4c e6       	ldi	r20, 0x6C	; 108
    107c:	51 e0       	ldi	r21, 0x01	; 1
    107e:	69 e3       	ldi	r22, 0x39	; 57
    1080:	8b e4       	ldi	r24, 0x4B	; 75
    1082:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			preselect = (menuPointer == 3) ? 2 : 0;
    1086:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	11 f4       	brne	.+4      	; 0x1092 <main+0x384>
    108e:	22 e0       	ldi	r18, 0x02	; 2
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <main+0x386>
    1092:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 74, "Setup    ", preselect);
    1094:	47 e7       	ldi	r20, 0x77	; 119
    1096:	51 e0       	ldi	r21, 0x01	; 1
    1098:	6a e4       	ldi	r22, 0x4A	; 74
    109a:	8b e4       	ldi	r24, 0x4B	; 75
    109c:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenPrintString(75, 91, "         ", 0);
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	41 e8       	ldi	r20, 0x81	; 129
    10a4:	51 e0       	ldi	r21, 0x01	; 1
    10a6:	6b e5       	ldi	r22, 0x5B	; 91
    10a8:	8b e4       	ldi	r24, 0x4B	; 75
    10aa:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			screenPrintString(75, 108, "         ", 0);
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	41 e8       	ldi	r20, 0x81	; 129
    10b2:	51 e0       	ldi	r21, 0x01	; 1
    10b4:	6c e6       	ldi	r22, 0x6C	; 108
    10b6:	8b e4       	ldi	r24, 0x4B	; 75
    10b8:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
		}
		if (currentScr == setupScreen){
    10bc:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <currentScr>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <main+0x3b8>
    10c4:	7d c0       	rjmp	.+250    	; 0x11c0 <main+0x4b2>
			sprintf(scrLineBuff, "Valve 1 %d", valve1);
    10c6:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <valve1>
    10ca:	1f 92       	push	r1
    10cc:	8f 93       	push	r24
    10ce:	8b e8       	ldi	r24, 0x8B	; 139
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	8a ec       	ldi	r24, 0xCA	; 202
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	9f 93       	push	r25
    10dc:	8f 93       	push	r24
    10de:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
			preselect = (menuPointer == 1) ? 2 : 0;
    10e2:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	11 f4       	brne	.+4      	; 0x10fa <main+0x3ec>
    10f6:	22 e0       	ldi	r18, 0x02	; 2
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <main+0x3ee>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 40, scrLineBuff, preselect);
    10fc:	4a ec       	ldi	r20, 0xCA	; 202
    10fe:	51 e0       	ldi	r21, 0x01	; 1
    1100:	68 e2       	ldi	r22, 0x28	; 40
    1102:	8b e4       	ldi	r24, 0x4B	; 75
    1104:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			
			sprintf(scrLineBuff, "Valve 2 %d", valve2);
    1108:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <valve2>
    110c:	1f 92       	push	r1
    110e:	8f 93       	push	r24
    1110:	86 e9       	ldi	r24, 0x96	; 150
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	8a ec       	ldi	r24, 0xCA	; 202
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	9f 93       	push	r25
    111e:	8f 93       	push	r24
    1120:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
			preselect = (menuPointer == 2) ? 2 : 0;
    1124:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	11 f4       	brne	.+4      	; 0x113c <main+0x42e>
    1138:	22 e0       	ldi	r18, 0x02	; 2
    113a:	01 c0       	rjmp	.+2      	; 0x113e <main+0x430>
    113c:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 57, scrLineBuff, preselect);
    113e:	4a ec       	ldi	r20, 0xCA	; 202
    1140:	51 e0       	ldi	r21, 0x01	; 1
    1142:	69 e3       	ldi	r22, 0x39	; 57
    1144:	8b e4       	ldi	r24, 0x4B	; 75
    1146:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			
			sprintf(scrLineBuff, "Pump    %d", pump);
    114a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <pump>
    114e:	1f 92       	push	r1
    1150:	8f 93       	push	r24
    1152:	81 ea       	ldi	r24, 0xA1	; 161
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9f 93       	push	r25
    1158:	8f 93       	push	r24
    115a:	8a ec       	ldi	r24, 0xCA	; 202
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	9f 93       	push	r25
    1160:	8f 93       	push	r24
    1162:	0e 94 47 09 	call	0x128e	; 0x128e <sprintf>
			preselect = (menuPointer == 3) ? 2 : 0;
    1166:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	11 f4       	brne	.+4      	; 0x117e <main+0x470>
    117a:	22 e0       	ldi	r18, 0x02	; 2
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <main+0x472>
    117e:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 74, scrLineBuff, preselect);
    1180:	4a ec       	ldi	r20, 0xCA	; 202
    1182:	51 e0       	ldi	r21, 0x01	; 1
    1184:	6a e4       	ldi	r22, 0x4A	; 74
    1186:	8b e4       	ldi	r24, 0x4B	; 75
    1188:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			preselect = (menuPointer == 4) ? 2 : 0;
    118c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	11 f4       	brne	.+4      	; 0x1198 <main+0x48a>
    1194:	22 e0       	ldi	r18, 0x02	; 2
    1196:	01 c0       	rjmp	.+2      	; 0x119a <main+0x48c>
    1198:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 91, "SET >0<  ", preselect);
    119a:	4c ea       	ldi	r20, 0xAC	; 172
    119c:	51 e0       	ldi	r21, 0x01	; 1
    119e:	6b e5       	ldi	r22, 0x5B	; 91
    11a0:	8b e4       	ldi	r24, 0x4B	; 75
    11a2:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
			preselect = (menuPointer == 5) ? 2 : 0;
    11a6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <menuPointer>
    11aa:	85 30       	cpi	r24, 0x05	; 5
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <main+0x4a4>
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <main+0x4a6>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
			screenPrintString(75, 108, "BACK    ", preselect);
    11b4:	46 eb       	ldi	r20, 0xB6	; 182
    11b6:	51 e0       	ldi	r21, 0x01	; 1
    11b8:	6c e6       	ldi	r22, 0x6C	; 108
    11ba:	8b e4       	ldi	r24, 0x4B	; 75
    11bc:	0e 94 d1 05 	call	0xba2	; 0xba2 <screenPrintString>
		
		//Menu
		
		
		
		screenKeepAlive();
    11c0:	0e 94 c4 05 	call	0xb88	; 0xb88 <screenKeepAlive>
    }
    11c4:	11 ce       	rjmp	.-990    	; 0xde8 <main+0xda>

000011c6 <__divmodhi4>:
    11c6:	97 fb       	bst	r25, 7
    11c8:	07 2e       	mov	r0, r23
    11ca:	16 f4       	brtc	.+4      	; 0x11d0 <__divmodhi4+0xa>
    11cc:	00 94       	com	r0
    11ce:	07 d0       	rcall	.+14     	; 0x11de <__divmodhi4_neg1>
    11d0:	77 fd       	sbrc	r23, 7
    11d2:	09 d0       	rcall	.+18     	; 0x11e6 <__divmodhi4_neg2>
    11d4:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodhi4>
    11d8:	07 fc       	sbrc	r0, 7
    11da:	05 d0       	rcall	.+10     	; 0x11e6 <__divmodhi4_neg2>
    11dc:	3e f4       	brtc	.+14     	; 0x11ec <__divmodhi4_exit>

000011de <__divmodhi4_neg1>:
    11de:	90 95       	com	r25
    11e0:	81 95       	neg	r24
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	08 95       	ret

000011e6 <__divmodhi4_neg2>:
    11e6:	70 95       	com	r23
    11e8:	61 95       	neg	r22
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255

000011ec <__divmodhi4_exit>:
    11ec:	08 95       	ret

000011ee <__udivmodsi4>:
    11ee:	a1 e2       	ldi	r26, 0x21	; 33
    11f0:	1a 2e       	mov	r1, r26
    11f2:	aa 1b       	sub	r26, r26
    11f4:	bb 1b       	sub	r27, r27
    11f6:	fd 01       	movw	r30, r26
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <__udivmodsi4_ep>

000011fa <__udivmodsi4_loop>:
    11fa:	aa 1f       	adc	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	ee 1f       	adc	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	a2 17       	cp	r26, r18
    1204:	b3 07       	cpc	r27, r19
    1206:	e4 07       	cpc	r30, r20
    1208:	f5 07       	cpc	r31, r21
    120a:	20 f0       	brcs	.+8      	; 0x1214 <__udivmodsi4_ep>
    120c:	a2 1b       	sub	r26, r18
    120e:	b3 0b       	sbc	r27, r19
    1210:	e4 0b       	sbc	r30, r20
    1212:	f5 0b       	sbc	r31, r21

00001214 <__udivmodsi4_ep>:
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	1a 94       	dec	r1
    121e:	69 f7       	brne	.-38     	; 0x11fa <__udivmodsi4_loop>
    1220:	60 95       	com	r22
    1222:	70 95       	com	r23
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	bd 01       	movw	r22, r26
    122e:	cf 01       	movw	r24, r30
    1230:	08 95       	ret

00001232 <__muluhisi3>:
    1232:	0e 94 38 09 	call	0x1270	; 0x1270 <__umulhisi3>
    1236:	a5 9f       	mul	r26, r21
    1238:	90 0d       	add	r25, r0
    123a:	b4 9f       	mul	r27, r20
    123c:	90 0d       	add	r25, r0
    123e:	a4 9f       	mul	r26, r20
    1240:	80 0d       	add	r24, r0
    1242:	91 1d       	adc	r25, r1
    1244:	11 24       	eor	r1, r1
    1246:	08 95       	ret

00001248 <__udivmodhi4>:
    1248:	aa 1b       	sub	r26, r26
    124a:	bb 1b       	sub	r27, r27
    124c:	51 e1       	ldi	r21, 0x11	; 17
    124e:	07 c0       	rjmp	.+14     	; 0x125e <__udivmodhi4_ep>

00001250 <__udivmodhi4_loop>:
    1250:	aa 1f       	adc	r26, r26
    1252:	bb 1f       	adc	r27, r27
    1254:	a6 17       	cp	r26, r22
    1256:	b7 07       	cpc	r27, r23
    1258:	10 f0       	brcs	.+4      	; 0x125e <__udivmodhi4_ep>
    125a:	a6 1b       	sub	r26, r22
    125c:	b7 0b       	sbc	r27, r23

0000125e <__udivmodhi4_ep>:
    125e:	88 1f       	adc	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	5a 95       	dec	r21
    1264:	a9 f7       	brne	.-22     	; 0x1250 <__udivmodhi4_loop>
    1266:	80 95       	com	r24
    1268:	90 95       	com	r25
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	08 95       	ret

00001270 <__umulhisi3>:
    1270:	a2 9f       	mul	r26, r18
    1272:	b0 01       	movw	r22, r0
    1274:	b3 9f       	mul	r27, r19
    1276:	c0 01       	movw	r24, r0
    1278:	a3 9f       	mul	r26, r19
    127a:	70 0d       	add	r23, r0
    127c:	81 1d       	adc	r24, r1
    127e:	11 24       	eor	r1, r1
    1280:	91 1d       	adc	r25, r1
    1282:	b2 9f       	mul	r27, r18
    1284:	70 0d       	add	r23, r0
    1286:	81 1d       	adc	r24, r1
    1288:	11 24       	eor	r1, r1
    128a:	91 1d       	adc	r25, r1
    128c:	08 95       	ret

0000128e <sprintf>:
    128e:	ae e0       	ldi	r26, 0x0E	; 14
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ed e4       	ldi	r30, 0x4D	; 77
    1294:	f9 e0       	ldi	r31, 0x09	; 9
    1296:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__prologue_saves__+0x1c>
    129a:	0d 89       	ldd	r16, Y+21	; 0x15
    129c:	1e 89       	ldd	r17, Y+22	; 0x16
    129e:	86 e0       	ldi	r24, 0x06	; 6
    12a0:	8c 83       	std	Y+4, r24	; 0x04
    12a2:	1a 83       	std	Y+2, r17	; 0x02
    12a4:	09 83       	std	Y+1, r16	; 0x01
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	9f e7       	ldi	r25, 0x7F	; 127
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	ae 01       	movw	r20, r28
    12b0:	47 5e       	subi	r20, 0xE7	; 231
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6f 89       	ldd	r22, Y+23	; 0x17
    12b6:	78 8d       	ldd	r23, Y+24	; 0x18
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vfprintf>
    12c0:	ef 81       	ldd	r30, Y+7	; 0x07
    12c2:	f8 85       	ldd	r31, Y+8	; 0x08
    12c4:	e0 0f       	add	r30, r16
    12c6:	f1 1f       	adc	r31, r17
    12c8:	10 82       	st	Z, r1
    12ca:	2e 96       	adiw	r28, 0x0e	; 14
    12cc:	e4 e0       	ldi	r30, 0x04	; 4
    12ce:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__epilogue_restores__+0x1c>

000012d2 <vfprintf>:
    12d2:	ab e0       	ldi	r26, 0x0B	; 11
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ef e6       	ldi	r30, 0x6F	; 111
    12d8:	f9 e0       	ldi	r31, 0x09	; 9
    12da:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__prologue_saves__>
    12de:	6c 01       	movw	r12, r24
    12e0:	7b 01       	movw	r14, r22
    12e2:	8a 01       	movw	r16, r20
    12e4:	fc 01       	movw	r30, r24
    12e6:	17 82       	std	Z+7, r1	; 0x07
    12e8:	16 82       	std	Z+6, r1	; 0x06
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 ff       	sbrs	r24, 1
    12ee:	cc c1       	rjmp	.+920    	; 0x1688 <vfprintf+0x3b6>
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	3c 01       	movw	r6, r24
    12f6:	f6 01       	movw	r30, r12
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	f7 01       	movw	r30, r14
    12fc:	93 fd       	sbrc	r25, 3
    12fe:	85 91       	lpm	r24, Z+
    1300:	93 ff       	sbrs	r25, 3
    1302:	81 91       	ld	r24, Z+
    1304:	7f 01       	movw	r14, r30
    1306:	88 23       	and	r24, r24
    1308:	09 f4       	brne	.+2      	; 0x130c <vfprintf+0x3a>
    130a:	ba c1       	rjmp	.+884    	; 0x1680 <vfprintf+0x3ae>
    130c:	85 32       	cpi	r24, 0x25	; 37
    130e:	39 f4       	brne	.+14     	; 0x131e <vfprintf+0x4c>
    1310:	93 fd       	sbrc	r25, 3
    1312:	85 91       	lpm	r24, Z+
    1314:	93 ff       	sbrs	r25, 3
    1316:	81 91       	ld	r24, Z+
    1318:	7f 01       	movw	r14, r30
    131a:	85 32       	cpi	r24, 0x25	; 37
    131c:	29 f4       	brne	.+10     	; 0x1328 <vfprintf+0x56>
    131e:	b6 01       	movw	r22, r12
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1326:	e7 cf       	rjmp	.-50     	; 0x12f6 <vfprintf+0x24>
    1328:	91 2c       	mov	r9, r1
    132a:	21 2c       	mov	r2, r1
    132c:	31 2c       	mov	r3, r1
    132e:	ff e1       	ldi	r31, 0x1F	; 31
    1330:	f3 15       	cp	r31, r3
    1332:	d8 f0       	brcs	.+54     	; 0x136a <vfprintf+0x98>
    1334:	8b 32       	cpi	r24, 0x2B	; 43
    1336:	79 f0       	breq	.+30     	; 0x1356 <vfprintf+0x84>
    1338:	38 f4       	brcc	.+14     	; 0x1348 <vfprintf+0x76>
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	79 f0       	breq	.+30     	; 0x135c <vfprintf+0x8a>
    133e:	83 32       	cpi	r24, 0x23	; 35
    1340:	a1 f4       	brne	.+40     	; 0x136a <vfprintf+0x98>
    1342:	23 2d       	mov	r18, r3
    1344:	20 61       	ori	r18, 0x10	; 16
    1346:	1d c0       	rjmp	.+58     	; 0x1382 <vfprintf+0xb0>
    1348:	8d 32       	cpi	r24, 0x2D	; 45
    134a:	61 f0       	breq	.+24     	; 0x1364 <vfprintf+0x92>
    134c:	80 33       	cpi	r24, 0x30	; 48
    134e:	69 f4       	brne	.+26     	; 0x136a <vfprintf+0x98>
    1350:	23 2d       	mov	r18, r3
    1352:	21 60       	ori	r18, 0x01	; 1
    1354:	16 c0       	rjmp	.+44     	; 0x1382 <vfprintf+0xb0>
    1356:	83 2d       	mov	r24, r3
    1358:	82 60       	ori	r24, 0x02	; 2
    135a:	38 2e       	mov	r3, r24
    135c:	e3 2d       	mov	r30, r3
    135e:	e4 60       	ori	r30, 0x04	; 4
    1360:	3e 2e       	mov	r3, r30
    1362:	2a c0       	rjmp	.+84     	; 0x13b8 <vfprintf+0xe6>
    1364:	f3 2d       	mov	r31, r3
    1366:	f8 60       	ori	r31, 0x08	; 8
    1368:	1d c0       	rjmp	.+58     	; 0x13a4 <vfprintf+0xd2>
    136a:	37 fc       	sbrc	r3, 7
    136c:	2d c0       	rjmp	.+90     	; 0x13c8 <vfprintf+0xf6>
    136e:	20 ed       	ldi	r18, 0xD0	; 208
    1370:	28 0f       	add	r18, r24
    1372:	2a 30       	cpi	r18, 0x0A	; 10
    1374:	40 f0       	brcs	.+16     	; 0x1386 <vfprintf+0xb4>
    1376:	8e 32       	cpi	r24, 0x2E	; 46
    1378:	b9 f4       	brne	.+46     	; 0x13a8 <vfprintf+0xd6>
    137a:	36 fc       	sbrc	r3, 6
    137c:	81 c1       	rjmp	.+770    	; 0x1680 <vfprintf+0x3ae>
    137e:	23 2d       	mov	r18, r3
    1380:	20 64       	ori	r18, 0x40	; 64
    1382:	32 2e       	mov	r3, r18
    1384:	19 c0       	rjmp	.+50     	; 0x13b8 <vfprintf+0xe6>
    1386:	36 fe       	sbrs	r3, 6
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <vfprintf+0xc4>
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	98 9e       	mul	r9, r24
    138e:	20 0d       	add	r18, r0
    1390:	11 24       	eor	r1, r1
    1392:	92 2e       	mov	r9, r18
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <vfprintf+0xe6>
    1396:	ea e0       	ldi	r30, 0x0A	; 10
    1398:	2e 9e       	mul	r2, r30
    139a:	20 0d       	add	r18, r0
    139c:	11 24       	eor	r1, r1
    139e:	22 2e       	mov	r2, r18
    13a0:	f3 2d       	mov	r31, r3
    13a2:	f0 62       	ori	r31, 0x20	; 32
    13a4:	3f 2e       	mov	r3, r31
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <vfprintf+0xe6>
    13a8:	8c 36       	cpi	r24, 0x6C	; 108
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <vfprintf+0xe2>
    13ac:	83 2d       	mov	r24, r3
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	38 2e       	mov	r3, r24
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <vfprintf+0xe6>
    13b4:	88 36       	cpi	r24, 0x68	; 104
    13b6:	41 f4       	brne	.+16     	; 0x13c8 <vfprintf+0xf6>
    13b8:	f7 01       	movw	r30, r14
    13ba:	93 fd       	sbrc	r25, 3
    13bc:	85 91       	lpm	r24, Z+
    13be:	93 ff       	sbrs	r25, 3
    13c0:	81 91       	ld	r24, Z+
    13c2:	7f 01       	movw	r14, r30
    13c4:	81 11       	cpse	r24, r1
    13c6:	b3 cf       	rjmp	.-154    	; 0x132e <vfprintf+0x5c>
    13c8:	98 2f       	mov	r25, r24
    13ca:	9f 7d       	andi	r25, 0xDF	; 223
    13cc:	95 54       	subi	r25, 0x45	; 69
    13ce:	93 30       	cpi	r25, 0x03	; 3
    13d0:	28 f4       	brcc	.+10     	; 0x13dc <vfprintf+0x10a>
    13d2:	0c 5f       	subi	r16, 0xFC	; 252
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	9f e3       	ldi	r25, 0x3F	; 63
    13d8:	99 83       	std	Y+1, r25	; 0x01
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <vfprintf+0x124>
    13dc:	83 36       	cpi	r24, 0x63	; 99
    13de:	31 f0       	breq	.+12     	; 0x13ec <vfprintf+0x11a>
    13e0:	83 37       	cpi	r24, 0x73	; 115
    13e2:	71 f0       	breq	.+28     	; 0x1400 <vfprintf+0x12e>
    13e4:	83 35       	cpi	r24, 0x53	; 83
    13e6:	09 f0       	breq	.+2      	; 0x13ea <vfprintf+0x118>
    13e8:	59 c0       	rjmp	.+178    	; 0x149c <vfprintf+0x1ca>
    13ea:	21 c0       	rjmp	.+66     	; 0x142e <vfprintf+0x15c>
    13ec:	f8 01       	movw	r30, r16
    13ee:	80 81       	ld	r24, Z
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	0e 5f       	subi	r16, 0xFE	; 254
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	88 24       	eor	r8, r8
    13f8:	83 94       	inc	r8
    13fa:	91 2c       	mov	r9, r1
    13fc:	53 01       	movw	r10, r6
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <vfprintf+0x154>
    1400:	28 01       	movw	r4, r16
    1402:	f2 e0       	ldi	r31, 0x02	; 2
    1404:	4f 0e       	add	r4, r31
    1406:	51 1c       	adc	r5, r1
    1408:	f8 01       	movw	r30, r16
    140a:	a0 80       	ld	r10, Z
    140c:	b1 80       	ldd	r11, Z+1	; 0x01
    140e:	36 fe       	sbrs	r3, 6
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <vfprintf+0x146>
    1412:	69 2d       	mov	r22, r9
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x14a>
    1418:	6f ef       	ldi	r22, 0xFF	; 255
    141a:	7f ef       	ldi	r23, 0xFF	; 255
    141c:	c5 01       	movw	r24, r10
    141e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <strnlen>
    1422:	4c 01       	movw	r8, r24
    1424:	82 01       	movw	r16, r4
    1426:	f3 2d       	mov	r31, r3
    1428:	ff 77       	andi	r31, 0x7F	; 127
    142a:	3f 2e       	mov	r3, r31
    142c:	16 c0       	rjmp	.+44     	; 0x145a <vfprintf+0x188>
    142e:	28 01       	movw	r4, r16
    1430:	22 e0       	ldi	r18, 0x02	; 2
    1432:	42 0e       	add	r4, r18
    1434:	51 1c       	adc	r5, r1
    1436:	f8 01       	movw	r30, r16
    1438:	a0 80       	ld	r10, Z
    143a:	b1 80       	ldd	r11, Z+1	; 0x01
    143c:	36 fe       	sbrs	r3, 6
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <vfprintf+0x174>
    1440:	69 2d       	mov	r22, r9
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <vfprintf+0x178>
    1446:	6f ef       	ldi	r22, 0xFF	; 255
    1448:	7f ef       	ldi	r23, 0xFF	; 255
    144a:	c5 01       	movw	r24, r10
    144c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <strnlen_P>
    1450:	4c 01       	movw	r8, r24
    1452:	f3 2d       	mov	r31, r3
    1454:	f0 68       	ori	r31, 0x80	; 128
    1456:	3f 2e       	mov	r3, r31
    1458:	82 01       	movw	r16, r4
    145a:	33 fc       	sbrc	r3, 3
    145c:	1b c0       	rjmp	.+54     	; 0x1494 <vfprintf+0x1c2>
    145e:	82 2d       	mov	r24, r2
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 16       	cp	r8, r24
    1464:	99 06       	cpc	r9, r25
    1466:	b0 f4       	brcc	.+44     	; 0x1494 <vfprintf+0x1c2>
    1468:	b6 01       	movw	r22, r12
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1472:	2a 94       	dec	r2
    1474:	f4 cf       	rjmp	.-24     	; 0x145e <vfprintf+0x18c>
    1476:	f5 01       	movw	r30, r10
    1478:	37 fc       	sbrc	r3, 7
    147a:	85 91       	lpm	r24, Z+
    147c:	37 fe       	sbrs	r3, 7
    147e:	81 91       	ld	r24, Z+
    1480:	5f 01       	movw	r10, r30
    1482:	b6 01       	movw	r22, r12
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    148a:	21 10       	cpse	r2, r1
    148c:	2a 94       	dec	r2
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	82 1a       	sub	r8, r18
    1492:	91 08       	sbc	r9, r1
    1494:	81 14       	cp	r8, r1
    1496:	91 04       	cpc	r9, r1
    1498:	71 f7       	brne	.-36     	; 0x1476 <vfprintf+0x1a4>
    149a:	e8 c0       	rjmp	.+464    	; 0x166c <vfprintf+0x39a>
    149c:	84 36       	cpi	r24, 0x64	; 100
    149e:	11 f0       	breq	.+4      	; 0x14a4 <vfprintf+0x1d2>
    14a0:	89 36       	cpi	r24, 0x69	; 105
    14a2:	41 f5       	brne	.+80     	; 0x14f4 <vfprintf+0x222>
    14a4:	f8 01       	movw	r30, r16
    14a6:	37 fe       	sbrs	r3, 7
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <vfprintf+0x1e6>
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	0c 5f       	subi	r16, 0xFC	; 252
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <vfprintf+0x1f6>
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	07 2e       	mov	r0, r23
    14be:	00 0c       	add	r0, r0
    14c0:	88 0b       	sbc	r24, r24
    14c2:	99 0b       	sbc	r25, r25
    14c4:	0e 5f       	subi	r16, 0xFE	; 254
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	f3 2d       	mov	r31, r3
    14ca:	ff 76       	andi	r31, 0x6F	; 111
    14cc:	3f 2e       	mov	r3, r31
    14ce:	97 ff       	sbrs	r25, 7
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x212>
    14d2:	90 95       	com	r25
    14d4:	80 95       	com	r24
    14d6:	70 95       	com	r23
    14d8:	61 95       	neg	r22
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	f0 68       	ori	r31, 0x80	; 128
    14e2:	3f 2e       	mov	r3, r31
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	a3 01       	movw	r20, r6
    14ea:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__ultoa_invert>
    14ee:	88 2e       	mov	r8, r24
    14f0:	86 18       	sub	r8, r6
    14f2:	45 c0       	rjmp	.+138    	; 0x157e <vfprintf+0x2ac>
    14f4:	85 37       	cpi	r24, 0x75	; 117
    14f6:	31 f4       	brne	.+12     	; 0x1504 <vfprintf+0x232>
    14f8:	23 2d       	mov	r18, r3
    14fa:	2f 7e       	andi	r18, 0xEF	; 239
    14fc:	b2 2e       	mov	r11, r18
    14fe:	2a e0       	ldi	r18, 0x0A	; 10
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	25 c0       	rjmp	.+74     	; 0x154e <vfprintf+0x27c>
    1504:	93 2d       	mov	r25, r3
    1506:	99 7f       	andi	r25, 0xF9	; 249
    1508:	b9 2e       	mov	r11, r25
    150a:	8f 36       	cpi	r24, 0x6F	; 111
    150c:	c1 f0       	breq	.+48     	; 0x153e <vfprintf+0x26c>
    150e:	18 f4       	brcc	.+6      	; 0x1516 <vfprintf+0x244>
    1510:	88 35       	cpi	r24, 0x58	; 88
    1512:	79 f0       	breq	.+30     	; 0x1532 <vfprintf+0x260>
    1514:	b5 c0       	rjmp	.+362    	; 0x1680 <vfprintf+0x3ae>
    1516:	80 37       	cpi	r24, 0x70	; 112
    1518:	19 f0       	breq	.+6      	; 0x1520 <vfprintf+0x24e>
    151a:	88 37       	cpi	r24, 0x78	; 120
    151c:	21 f0       	breq	.+8      	; 0x1526 <vfprintf+0x254>
    151e:	b0 c0       	rjmp	.+352    	; 0x1680 <vfprintf+0x3ae>
    1520:	e9 2f       	mov	r30, r25
    1522:	e0 61       	ori	r30, 0x10	; 16
    1524:	be 2e       	mov	r11, r30
    1526:	b4 fe       	sbrs	r11, 4
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <vfprintf+0x272>
    152a:	fb 2d       	mov	r31, r11
    152c:	f4 60       	ori	r31, 0x04	; 4
    152e:	bf 2e       	mov	r11, r31
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <vfprintf+0x272>
    1532:	34 fe       	sbrs	r3, 4
    1534:	0a c0       	rjmp	.+20     	; 0x154a <vfprintf+0x278>
    1536:	29 2f       	mov	r18, r25
    1538:	26 60       	ori	r18, 0x06	; 6
    153a:	b2 2e       	mov	r11, r18
    153c:	06 c0       	rjmp	.+12     	; 0x154a <vfprintf+0x278>
    153e:	28 e0       	ldi	r18, 0x08	; 8
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	05 c0       	rjmp	.+10     	; 0x154e <vfprintf+0x27c>
    1544:	20 e1       	ldi	r18, 0x10	; 16
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x27c>
    154a:	20 e1       	ldi	r18, 0x10	; 16
    154c:	32 e0       	ldi	r19, 0x02	; 2
    154e:	f8 01       	movw	r30, r16
    1550:	b7 fe       	sbrs	r11, 7
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <vfprintf+0x290>
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	0c 5f       	subi	r16, 0xFC	; 252
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	06 c0       	rjmp	.+12     	; 0x156e <vfprintf+0x29c>
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 5f       	subi	r16, 0xFE	; 254
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	a3 01       	movw	r20, r6
    1570:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__ultoa_invert>
    1574:	88 2e       	mov	r8, r24
    1576:	86 18       	sub	r8, r6
    1578:	fb 2d       	mov	r31, r11
    157a:	ff 77       	andi	r31, 0x7F	; 127
    157c:	3f 2e       	mov	r3, r31
    157e:	36 fe       	sbrs	r3, 6
    1580:	0d c0       	rjmp	.+26     	; 0x159c <vfprintf+0x2ca>
    1582:	23 2d       	mov	r18, r3
    1584:	2e 7f       	andi	r18, 0xFE	; 254
    1586:	a2 2e       	mov	r10, r18
    1588:	89 14       	cp	r8, r9
    158a:	58 f4       	brcc	.+22     	; 0x15a2 <vfprintf+0x2d0>
    158c:	34 fe       	sbrs	r3, 4
    158e:	0b c0       	rjmp	.+22     	; 0x15a6 <vfprintf+0x2d4>
    1590:	32 fc       	sbrc	r3, 2
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <vfprintf+0x2d4>
    1594:	83 2d       	mov	r24, r3
    1596:	8e 7e       	andi	r24, 0xEE	; 238
    1598:	a8 2e       	mov	r10, r24
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <vfprintf+0x2d4>
    159c:	b8 2c       	mov	r11, r8
    159e:	a3 2c       	mov	r10, r3
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x2d6>
    15a2:	b8 2c       	mov	r11, r8
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <vfprintf+0x2d6>
    15a6:	b9 2c       	mov	r11, r9
    15a8:	a4 fe       	sbrs	r10, 4
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <vfprintf+0x2f8>
    15ac:	fe 01       	movw	r30, r28
    15ae:	e8 0d       	add	r30, r8
    15b0:	f1 1d       	adc	r31, r1
    15b2:	80 81       	ld	r24, Z
    15b4:	80 33       	cpi	r24, 0x30	; 48
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <vfprintf+0x2ee>
    15b8:	9a 2d       	mov	r25, r10
    15ba:	99 7e       	andi	r25, 0xE9	; 233
    15bc:	a9 2e       	mov	r10, r25
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <vfprintf+0x300>
    15c0:	a2 fe       	sbrs	r10, 2
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <vfprintf+0x2fe>
    15c4:	b3 94       	inc	r11
    15c6:	b3 94       	inc	r11
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <vfprintf+0x300>
    15ca:	8a 2d       	mov	r24, r10
    15cc:	86 78       	andi	r24, 0x86	; 134
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <vfprintf+0x300>
    15d0:	b3 94       	inc	r11
    15d2:	a3 fc       	sbrc	r10, 3
    15d4:	11 c0       	rjmp	.+34     	; 0x15f8 <vfprintf+0x326>
    15d6:	a0 fe       	sbrs	r10, 0
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0x314>
    15da:	b2 14       	cp	r11, r2
    15dc:	88 f4       	brcc	.+34     	; 0x1600 <vfprintf+0x32e>
    15de:	28 0c       	add	r2, r8
    15e0:	92 2c       	mov	r9, r2
    15e2:	9b 18       	sub	r9, r11
    15e4:	0e c0       	rjmp	.+28     	; 0x1602 <vfprintf+0x330>
    15e6:	b2 14       	cp	r11, r2
    15e8:	60 f4       	brcc	.+24     	; 0x1602 <vfprintf+0x330>
    15ea:	b6 01       	movw	r22, r12
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    15f4:	b3 94       	inc	r11
    15f6:	f7 cf       	rjmp	.-18     	; 0x15e6 <vfprintf+0x314>
    15f8:	b2 14       	cp	r11, r2
    15fa:	18 f4       	brcc	.+6      	; 0x1602 <vfprintf+0x330>
    15fc:	2b 18       	sub	r2, r11
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x332>
    1600:	98 2c       	mov	r9, r8
    1602:	21 2c       	mov	r2, r1
    1604:	a4 fe       	sbrs	r10, 4
    1606:	10 c0       	rjmp	.+32     	; 0x1628 <vfprintf+0x356>
    1608:	b6 01       	movw	r22, r12
    160a:	80 e3       	ldi	r24, 0x30	; 48
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1612:	a2 fe       	sbrs	r10, 2
    1614:	17 c0       	rjmp	.+46     	; 0x1644 <vfprintf+0x372>
    1616:	a1 fc       	sbrc	r10, 1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <vfprintf+0x34e>
    161a:	88 e7       	ldi	r24, 0x78	; 120
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x352>
    1620:	88 e5       	ldi	r24, 0x58	; 88
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	b6 01       	movw	r22, r12
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <vfprintf+0x36e>
    1628:	8a 2d       	mov	r24, r10
    162a:	86 78       	andi	r24, 0x86	; 134
    162c:	59 f0       	breq	.+22     	; 0x1644 <vfprintf+0x372>
    162e:	a1 fe       	sbrs	r10, 1
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x364>
    1632:	8b e2       	ldi	r24, 0x2B	; 43
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <vfprintf+0x366>
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	a7 fc       	sbrc	r10, 7
    163a:	8d e2       	ldi	r24, 0x2D	; 45
    163c:	b6 01       	movw	r22, r12
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1644:	89 14       	cp	r8, r9
    1646:	38 f4       	brcc	.+14     	; 0x1656 <vfprintf+0x384>
    1648:	b6 01       	movw	r22, r12
    164a:	80 e3       	ldi	r24, 0x30	; 48
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1652:	9a 94       	dec	r9
    1654:	f7 cf       	rjmp	.-18     	; 0x1644 <vfprintf+0x372>
    1656:	8a 94       	dec	r8
    1658:	f3 01       	movw	r30, r6
    165a:	e8 0d       	add	r30, r8
    165c:	f1 1d       	adc	r31, r1
    165e:	80 81       	ld	r24, Z
    1660:	b6 01       	movw	r22, r12
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    1668:	81 10       	cpse	r8, r1
    166a:	f5 cf       	rjmp	.-22     	; 0x1656 <vfprintf+0x384>
    166c:	22 20       	and	r2, r2
    166e:	09 f4       	brne	.+2      	; 0x1672 <vfprintf+0x3a0>
    1670:	42 ce       	rjmp	.-892    	; 0x12f6 <vfprintf+0x24>
    1672:	b6 01       	movw	r22, r12
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <fputc>
    167c:	2a 94       	dec	r2
    167e:	f6 cf       	rjmp	.-20     	; 0x166c <vfprintf+0x39a>
    1680:	f6 01       	movw	r30, r12
    1682:	86 81       	ldd	r24, Z+6	; 0x06
    1684:	97 81       	ldd	r25, Z+7	; 0x07
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x3ba>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	2b 96       	adiw	r28, 0x0b	; 11
    168e:	e2 e1       	ldi	r30, 0x12	; 18
    1690:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__epilogue_restores__>

00001694 <strnlen_P>:
    1694:	fc 01       	movw	r30, r24
    1696:	05 90       	lpm	r0, Z+
    1698:	61 50       	subi	r22, 0x01	; 1
    169a:	70 40       	sbci	r23, 0x00	; 0
    169c:	01 10       	cpse	r0, r1
    169e:	d8 f7       	brcc	.-10     	; 0x1696 <strnlen_P+0x2>
    16a0:	80 95       	com	r24
    16a2:	90 95       	com	r25
    16a4:	8e 0f       	add	r24, r30
    16a6:	9f 1f       	adc	r25, r31
    16a8:	08 95       	ret

000016aa <strnlen>:
    16aa:	fc 01       	movw	r30, r24
    16ac:	61 50       	subi	r22, 0x01	; 1
    16ae:	70 40       	sbci	r23, 0x00	; 0
    16b0:	01 90       	ld	r0, Z+
    16b2:	01 10       	cpse	r0, r1
    16b4:	d8 f7       	brcc	.-10     	; 0x16ac <strnlen+0x2>
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	8e 0f       	add	r24, r30
    16bc:	9f 1f       	adc	r25, r31
    16be:	08 95       	ret

000016c0 <fputc>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	fb 01       	movw	r30, r22
    16ca:	23 81       	ldd	r18, Z+3	; 0x03
    16cc:	21 fd       	sbrc	r18, 1
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <fputc+0x16>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	9f ef       	ldi	r25, 0xFF	; 255
    16d4:	2c c0       	rjmp	.+88     	; 0x172e <fputc+0x6e>
    16d6:	22 ff       	sbrs	r18, 2
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <fputc+0x46>
    16da:	46 81       	ldd	r20, Z+6	; 0x06
    16dc:	57 81       	ldd	r21, Z+7	; 0x07
    16de:	24 81       	ldd	r18, Z+4	; 0x04
    16e0:	35 81       	ldd	r19, Z+5	; 0x05
    16e2:	42 17       	cp	r20, r18
    16e4:	53 07       	cpc	r21, r19
    16e6:	44 f4       	brge	.+16     	; 0x16f8 <fputc+0x38>
    16e8:	a0 81       	ld	r26, Z
    16ea:	b1 81       	ldd	r27, Z+1	; 0x01
    16ec:	9d 01       	movw	r18, r26
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	31 83       	std	Z+1, r19	; 0x01
    16f4:	20 83       	st	Z, r18
    16f6:	8c 93       	st	X, r24
    16f8:	26 81       	ldd	r18, Z+6	; 0x06
    16fa:	37 81       	ldd	r19, Z+7	; 0x07
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	37 83       	std	Z+7, r19	; 0x07
    1702:	26 83       	std	Z+6, r18	; 0x06
    1704:	14 c0       	rjmp	.+40     	; 0x172e <fputc+0x6e>
    1706:	8b 01       	movw	r16, r22
    1708:	ec 01       	movw	r28, r24
    170a:	fb 01       	movw	r30, r22
    170c:	00 84       	ldd	r0, Z+8	; 0x08
    170e:	f1 85       	ldd	r31, Z+9	; 0x09
    1710:	e0 2d       	mov	r30, r0
    1712:	09 95       	icall
    1714:	89 2b       	or	r24, r25
    1716:	e1 f6       	brne	.-72     	; 0x16d0 <fputc+0x10>
    1718:	d8 01       	movw	r26, r16
    171a:	16 96       	adiw	r26, 0x06	; 6
    171c:	8d 91       	ld	r24, X+
    171e:	9c 91       	ld	r25, X
    1720:	17 97       	sbiw	r26, 0x07	; 7
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	17 96       	adiw	r26, 0x07	; 7
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
    172a:	16 97       	sbiw	r26, 0x06	; 6
    172c:	ce 01       	movw	r24, r28
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <__ultoa_invert>:
    1738:	fa 01       	movw	r30, r20
    173a:	aa 27       	eor	r26, r26
    173c:	28 30       	cpi	r18, 0x08	; 8
    173e:	51 f1       	breq	.+84     	; 0x1794 <__ultoa_invert+0x5c>
    1740:	20 31       	cpi	r18, 0x10	; 16
    1742:	81 f1       	breq	.+96     	; 0x17a4 <__ultoa_invert+0x6c>
    1744:	e8 94       	clt
    1746:	6f 93       	push	r22
    1748:	6e 7f       	andi	r22, 0xFE	; 254
    174a:	6e 5f       	subi	r22, 0xFE	; 254
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	af 4f       	sbci	r26, 0xFF	; 255
    1754:	b1 e0       	ldi	r27, 0x01	; 1
    1756:	3e d0       	rcall	.+124    	; 0x17d4 <__ultoa_invert+0x9c>
    1758:	b4 e0       	ldi	r27, 0x04	; 4
    175a:	3c d0       	rcall	.+120    	; 0x17d4 <__ultoa_invert+0x9c>
    175c:	67 0f       	add	r22, r23
    175e:	78 1f       	adc	r23, r24
    1760:	89 1f       	adc	r24, r25
    1762:	9a 1f       	adc	r25, r26
    1764:	a1 1d       	adc	r26, r1
    1766:	68 0f       	add	r22, r24
    1768:	79 1f       	adc	r23, r25
    176a:	8a 1f       	adc	r24, r26
    176c:	91 1d       	adc	r25, r1
    176e:	a1 1d       	adc	r26, r1
    1770:	6a 0f       	add	r22, r26
    1772:	71 1d       	adc	r23, r1
    1774:	81 1d       	adc	r24, r1
    1776:	91 1d       	adc	r25, r1
    1778:	a1 1d       	adc	r26, r1
    177a:	20 d0       	rcall	.+64     	; 0x17bc <__ultoa_invert+0x84>
    177c:	09 f4       	brne	.+2      	; 0x1780 <__ultoa_invert+0x48>
    177e:	68 94       	set
    1780:	3f 91       	pop	r19
    1782:	2a e0       	ldi	r18, 0x0A	; 10
    1784:	26 9f       	mul	r18, r22
    1786:	11 24       	eor	r1, r1
    1788:	30 19       	sub	r19, r0
    178a:	30 5d       	subi	r19, 0xD0	; 208
    178c:	31 93       	st	Z+, r19
    178e:	de f6       	brtc	.-74     	; 0x1746 <__ultoa_invert+0xe>
    1790:	cf 01       	movw	r24, r30
    1792:	08 95       	ret
    1794:	46 2f       	mov	r20, r22
    1796:	47 70       	andi	r20, 0x07	; 7
    1798:	40 5d       	subi	r20, 0xD0	; 208
    179a:	41 93       	st	Z+, r20
    179c:	b3 e0       	ldi	r27, 0x03	; 3
    179e:	0f d0       	rcall	.+30     	; 0x17be <__ultoa_invert+0x86>
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <__ultoa_invert+0x5c>
    17a2:	f6 cf       	rjmp	.-20     	; 0x1790 <__ultoa_invert+0x58>
    17a4:	46 2f       	mov	r20, r22
    17a6:	4f 70       	andi	r20, 0x0F	; 15
    17a8:	40 5d       	subi	r20, 0xD0	; 208
    17aa:	4a 33       	cpi	r20, 0x3A	; 58
    17ac:	18 f0       	brcs	.+6      	; 0x17b4 <__ultoa_invert+0x7c>
    17ae:	49 5d       	subi	r20, 0xD9	; 217
    17b0:	31 fd       	sbrc	r19, 1
    17b2:	40 52       	subi	r20, 0x20	; 32
    17b4:	41 93       	st	Z+, r20
    17b6:	02 d0       	rcall	.+4      	; 0x17bc <__ultoa_invert+0x84>
    17b8:	a9 f7       	brne	.-22     	; 0x17a4 <__ultoa_invert+0x6c>
    17ba:	ea cf       	rjmp	.-44     	; 0x1790 <__ultoa_invert+0x58>
    17bc:	b4 e0       	ldi	r27, 0x04	; 4
    17be:	a6 95       	lsr	r26
    17c0:	97 95       	ror	r25
    17c2:	87 95       	ror	r24
    17c4:	77 95       	ror	r23
    17c6:	67 95       	ror	r22
    17c8:	ba 95       	dec	r27
    17ca:	c9 f7       	brne	.-14     	; 0x17be <__ultoa_invert+0x86>
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	61 05       	cpc	r22, r1
    17d0:	71 05       	cpc	r23, r1
    17d2:	08 95       	ret
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	0a 2e       	mov	r0, r26
    17da:	06 94       	lsr	r0
    17dc:	57 95       	ror	r21
    17de:	47 95       	ror	r20
    17e0:	37 95       	ror	r19
    17e2:	27 95       	ror	r18
    17e4:	ba 95       	dec	r27
    17e6:	c9 f7       	brne	.-14     	; 0x17da <__ultoa_invert+0xa2>
    17e8:	62 0f       	add	r22, r18
    17ea:	73 1f       	adc	r23, r19
    17ec:	84 1f       	adc	r24, r20
    17ee:	95 1f       	adc	r25, r21
    17f0:	a0 1d       	adc	r26, r0
    17f2:	08 95       	ret

000017f4 <__prologue_saves__>:
    17f4:	2f 92       	push	r2
    17f6:	3f 92       	push	r3
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ca 1b       	sub	r28, r26
    181e:	db 0b       	sbc	r29, r27
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	09 94       	ijmp

0000182c <__epilogue_restores__>:
    182c:	2a 88       	ldd	r2, Y+18	; 0x12
    182e:	39 88       	ldd	r3, Y+17	; 0x11
    1830:	48 88       	ldd	r4, Y+16	; 0x10
    1832:	5f 84       	ldd	r5, Y+15	; 0x0f
    1834:	6e 84       	ldd	r6, Y+14	; 0x0e
    1836:	7d 84       	ldd	r7, Y+13	; 0x0d
    1838:	8c 84       	ldd	r8, Y+12	; 0x0c
    183a:	9b 84       	ldd	r9, Y+11	; 0x0b
    183c:	aa 84       	ldd	r10, Y+10	; 0x0a
    183e:	b9 84       	ldd	r11, Y+9	; 0x09
    1840:	c8 84       	ldd	r12, Y+8	; 0x08
    1842:	df 80       	ldd	r13, Y+7	; 0x07
    1844:	ee 80       	ldd	r14, Y+6	; 0x06
    1846:	fd 80       	ldd	r15, Y+5	; 0x05
    1848:	0c 81       	ldd	r16, Y+4	; 0x04
    184a:	1b 81       	ldd	r17, Y+3	; 0x03
    184c:	aa 81       	ldd	r26, Y+2	; 0x02
    184e:	b9 81       	ldd	r27, Y+1	; 0x01
    1850:	ce 0f       	add	r28, r30
    1852:	d1 1d       	adc	r29, r1
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	ed 01       	movw	r28, r26
    1860:	08 95       	ret

00001862 <_exit>:
    1862:	f8 94       	cli

00001864 <__stop_program>:
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <__stop_program>
