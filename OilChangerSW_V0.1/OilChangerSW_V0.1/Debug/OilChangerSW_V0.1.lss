
OilChangerSW_V0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  0000101e  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000101e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800182  00800182  00001134  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bea  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001493  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b10  00000000  00000000  00005525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  00007038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ba9  00000000  00000000  00007778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002083  00000000  00000000  00008321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_24>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_39>
      a0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_40>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee e1       	ldi	r30, 0x1E	; 30
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 38       	cpi	r26, 0x82	; 130
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a2 e8       	ldi	r26, 0x82	; 130
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 3a       	cpi	r26, 0xA3	; 163
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 04 04 	call	0x808	; 0x808 <main>
      ea:	0c 94 0d 08 	jmp	0x101a	; 0x101a <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_21>:
 */ 
#include "adc_hal.h"

volatile static uint8_t adc_convert_done = 1;

ISR(ADC_vect){
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
	adc_convert_done = 1;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <gpio_set_pin_level>:

}


void gpio_set_port_level(gpio *GPIOx, const uint8_t mask){
	*GPIOx->port=mask;
     110:	66 23       	and	r22, r22
     112:	99 f0       	breq	.+38     	; 0x13a <gpio_set_pin_level+0x2a>
     114:	dc 01       	movw	r26, r24
     116:	ed 91       	ld	r30, X+
     118:	fc 91       	ld	r31, X
     11a:	11 97       	sbiw	r26, 0x01	; 1
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	a9 01       	movw	r20, r18
     122:	12 96       	adiw	r26, 0x02	; 2
     124:	0c 90       	ld	r0, X
     126:	02 c0       	rjmp	.+4      	; 0x12c <gpio_set_pin_level+0x1c>
     128:	44 0f       	add	r20, r20
     12a:	55 1f       	adc	r21, r21
     12c:	0a 94       	dec	r0
     12e:	e2 f7       	brpl	.-8      	; 0x128 <gpio_set_pin_level+0x18>
     130:	ca 01       	movw	r24, r20
     132:	90 81       	ld	r25, Z
     134:	89 2b       	or	r24, r25
     136:	80 83       	st	Z, r24
     138:	08 95       	ret
     13a:	dc 01       	movw	r26, r24
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	11 97       	sbiw	r26, 0x01	; 1
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	a9 01       	movw	r20, r18
     148:	12 96       	adiw	r26, 0x02	; 2
     14a:	0c 90       	ld	r0, X
     14c:	02 c0       	rjmp	.+4      	; 0x152 <gpio_set_pin_level+0x42>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	0a 94       	dec	r0
     154:	e2 f7       	brpl	.-8      	; 0x14e <gpio_set_pin_level+0x3e>
     156:	ca 01       	movw	r24, r20
     158:	80 95       	com	r24
     15a:	90 81       	ld	r25, Z
     15c:	89 23       	and	r24, r25
     15e:	80 83       	st	Z, r24
     160:	08 95       	ret

00000162 <gpio_set_pin_direction>:
     162:	fc 01       	movw	r30, r24
     164:	30 81       	ld	r19, Z
     166:	21 81       	ldd	r18, Z+1	; 0x01
     168:	61 30       	cpi	r22, 0x01	; 1
     16a:	99 f0       	breq	.+38     	; 0x192 <gpio_set_pin_direction+0x30>
     16c:	18 f0       	brcs	.+6      	; 0x174 <gpio_set_pin_direction+0x12>
     16e:	62 30       	cpi	r22, 0x02	; 2
     170:	f1 f0       	breq	.+60     	; 0x1ae <gpio_set_pin_direction+0x4c>
     172:	08 95       	ret
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 80       	ldd	r0, Z+2	; 0x02
     17a:	02 c0       	rjmp	.+4      	; 0x180 <gpio_set_pin_direction+0x1e>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <gpio_set_pin_direction+0x1a>
     184:	e3 2f       	mov	r30, r19
     186:	f2 2f       	mov	r31, r18
     188:	80 95       	com	r24
     18a:	92 91       	ld	r25, -Z
     18c:	89 23       	and	r24, r25
     18e:	80 83       	st	Z, r24
     190:	08 95       	ret
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 80       	ldd	r0, Z+2	; 0x02
     198:	02 c0       	rjmp	.+4      	; 0x19e <gpio_set_pin_direction+0x3c>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <gpio_set_pin_direction+0x38>
     1a2:	e3 2f       	mov	r30, r19
     1a4:	f2 2f       	mov	r31, r18
     1a6:	92 91       	ld	r25, -Z
     1a8:	89 2b       	or	r24, r25
     1aa:	80 83       	st	Z, r24
     1ac:	08 95       	ret
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	ac 01       	movw	r20, r24
     1b4:	02 80       	ldd	r0, Z+2	; 0x02
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <gpio_set_pin_direction+0x5a>
     1b8:	44 0f       	add	r20, r20
     1ba:	55 1f       	adc	r21, r21
     1bc:	0a 94       	dec	r0
     1be:	e2 f7       	brpl	.-8      	; 0x1b8 <gpio_set_pin_direction+0x56>
     1c0:	a3 2f       	mov	r26, r19
     1c2:	b2 2f       	mov	r27, r18
     1c4:	40 95       	com	r20
     1c6:	2e 91       	ld	r18, -X
     1c8:	42 23       	and	r20, r18
     1ca:	4c 93       	st	X, r20
     1cc:	a0 81       	ld	r26, Z
     1ce:	b1 81       	ldd	r27, Z+1	; 0x01
     1d0:	02 80       	ldd	r0, Z+2	; 0x02
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <gpio_set_pin_direction+0x76>
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	0a 94       	dec	r0
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <gpio_set_pin_direction+0x72>
     1dc:	80 95       	com	r24
     1de:	9c 91       	ld	r25, X
     1e0:	89 23       	and	r24, r25
     1e2:	8c 93       	st	X, r24
     1e4:	08 95       	ret

000001e6 <gpio_toggle_pin_level>:
}

void gpio_toggle_pin_level(gpio *GPIOx)

{
	uint8_t *tmp_port = GPIOx->port-2;
     1e6:	dc 01       	movw	r26, r24
     1e8:	ed 91       	ld	r30, X+
     1ea:	fc 91       	ld	r31, X
     1ec:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port = 1 << GPIOx->pin;
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	12 96       	adiw	r26, 0x02	; 2
     1f6:	0c 90       	ld	r0, X
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <gpio_toggle_pin_level+0x18>
     1fa:	44 0f       	add	r20, r20
     1fc:	55 1f       	adc	r21, r21
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <gpio_toggle_pin_level+0x14>
     202:	32 97       	sbiw	r30, 0x02	; 2
     204:	40 83       	st	Z, r20
     206:	08 95       	ret

00000208 <__vector_39>:
gpio spi_ss_pin = {(uint8_t *)&PORTE , PORTE2};




ISR(SPI1_STC_vect){
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	8f 93       	push	r24
	if(SPSR1 & 0x40){
     214:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
     218:	86 ff       	sbrs	r24, 6
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__vector_39+0x1c>
		//spi_rx_data = 0;
		spi_txrx_done = 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
     222:	03 c0       	rjmp	.+6      	; 0x22a <__vector_39+0x22>
		}else{
		spi_txrx_done = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
	}
}
     22a:	8f 91       	pop	r24
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <__vector_24>:
static volatile status = 0xF8;
static uint8_t twiReady;


ISR(TWI0_vect)
{
     236:	1f 92       	push	r1
     238:	0f 92       	push	r0
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	0f 92       	push	r0
     23e:	11 24       	eor	r1, r1
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
	//cli(); // Disable Global Interrupt
	status=TWSR0 & 0xF8; // Get TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
     248:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     24c:	88 7f       	andi	r24, 0xF8	; 248
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <status+0x1>
     254:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
	switch(status) {
     258:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status>
     25c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <status+0x1>
     260:	88 3a       	cpi	r24, 0xA8	; 168
     262:	91 05       	cpc	r25, r1
     264:	31 f1       	breq	.+76     	; 0x2b2 <__vector_24+0x7c>
     266:	3c f4       	brge	.+14     	; 0x276 <__vector_24+0x40>
     268:	80 38       	cpi	r24, 0x80	; 128
     26a:	91 05       	cpc	r25, r1
     26c:	59 f0       	breq	.+22     	; 0x284 <__vector_24+0x4e>
     26e:	80 3a       	cpi	r24, 0xA0	; 160
     270:	91 05       	cpc	r25, r1
     272:	c9 f0       	breq	.+50     	; 0x2a6 <__vector_24+0x70>
     274:	42 c0       	rjmp	.+132    	; 0x2fa <__vector_24+0xc4>
     276:	88 3b       	cpi	r24, 0xB8	; 184
     278:	91 05       	cpc	r25, r1
     27a:	61 f1       	breq	.+88     	; 0x2d4 <__vector_24+0x9e>
     27c:	80 3c       	cpi	r24, 0xC0	; 192
     27e:	91 05       	cpc	r25, r1
     280:	d1 f1       	breq	.+116    	; 0x2f6 <__vector_24+0xc0>
     282:	3b c0       	rjmp	.+118    	; 0x2fa <__vector_24+0xc4>
		case TW_SR_SLA_ACK:	// 0x60: SLA+W received, ACK returned
			break;
		case TW_SR_DATA_ACK:	// 0x80: data received, ACK returned
			twi_buff[byteIndex] = TWDR0;	// Save data to the register address
     284:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     288:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     28c:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     290:	e8 0f       	add	r30, r24
     292:	f1 1d       	adc	r31, r1
     294:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     298:	80 83       	st	Z, r24
			byteIndex++;
     29a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     29e:	8f 5f       	subi	r24, 0xFF	; 255
     2a0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
		break;
     2a4:	2a c0       	rjmp	.+84     	; 0x2fa <__vector_24+0xc4>
			case TW_SR_STOP:	// 0xA0: stop or repeated start condition received while selected
			twiReady = 1;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <twiReady>
			byteIndex = 0;
     2ac:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <byteIndex>
		break;
     2b0:	24 c0       	rjmp	.+72     	; 0x2fa <__vector_24+0xc4>
			case TW_ST_SLA_ACK:	// 0xA8: SLA+R received, ACK returned {ADDRESS REGISTER or first byte in slave mode}
			TWDR0 = twi_buff[byteIndex];
     2b2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     2b6:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     2ba:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     2be:	e8 0f       	add	r30, r24
     2c0:	f1 1d       	adc	r31, r1
     2c2:	80 81       	ld	r24, Z
     2c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
     2c8:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
			break;
     2d2:	13 c0       	rjmp	.+38     	; 0x2fa <__vector_24+0xc4>
		case TW_ST_DATA_ACK:	// 0xB8: data transmitted, ACK received
			TWDR0 = twi_buff[byteIndex];
     2d4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     2d8:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     2dc:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     2e0:	e8 0f       	add	r30, r24
     2e2:	f1 1d       	adc	r31, r1
     2e4:	80 81       	ld	r24, Z
     2e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			byteIndex++;
     2ea:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
			break;
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_24+0xc4>
		case TW_ST_DATA_NACK:	// 0xC0: data transmitted, NACK received
			byteIndex = 0;
     2f6:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <byteIndex>
		case TW_BUS_ERROR:	// 0x00: illegal start or stop condition
			break;
		default:
			break;
	}
	if (twi_mode){TWCR0 |= (1<<TWINT);}// Clear TWINT Flag
     2fa:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <twi_mode>
     2fe:	88 23       	and	r24, r24
     300:	29 f0       	breq	.+10     	; 0x30c <__vector_24+0xd6>
     302:	ec eb       	ldi	r30, 0xBC	; 188
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	80 68       	ori	r24, 0x80	; 128
     30a:	80 83       	st	Z, r24
	//sei(); // Enable Global Interrupt
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	9f 91       	pop	r25
     312:	8f 91       	pop	r24
     314:	0f 90       	pop	r0
     316:	0f be       	out	0x3f, r0	; 63
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	18 95       	reti

0000031e <__vector_40>:
static volatile status = 0xF8;
static uint8_t twiReady;


ISR(TWI1_vect)
{
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
	//cli(); // Disable Global Interrupt
	status=TWSR1 & 0xF8; // Get TWI Status Register, mask the prescaler bits (TWPS1,TWPS0)
     330:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
     334:	88 7f       	andi	r24, 0xF8	; 248
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <status+0x1>
     33c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
	switch(status) {
     340:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status>
     344:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <status+0x1>
     348:	88 3a       	cpi	r24, 0xA8	; 168
     34a:	91 05       	cpc	r25, r1
     34c:	31 f1       	breq	.+76     	; 0x39a <__vector_40+0x7c>
     34e:	3c f4       	brge	.+14     	; 0x35e <__vector_40+0x40>
     350:	80 38       	cpi	r24, 0x80	; 128
     352:	91 05       	cpc	r25, r1
     354:	59 f0       	breq	.+22     	; 0x36c <__vector_40+0x4e>
     356:	80 3a       	cpi	r24, 0xA0	; 160
     358:	91 05       	cpc	r25, r1
     35a:	c9 f0       	breq	.+50     	; 0x38e <__vector_40+0x70>
     35c:	42 c0       	rjmp	.+132    	; 0x3e2 <__vector_40+0xc4>
     35e:	88 3b       	cpi	r24, 0xB8	; 184
     360:	91 05       	cpc	r25, r1
     362:	61 f1       	breq	.+88     	; 0x3bc <__vector_40+0x9e>
     364:	80 3c       	cpi	r24, 0xC0	; 192
     366:	91 05       	cpc	r25, r1
     368:	d1 f1       	breq	.+116    	; 0x3de <__vector_40+0xc0>
     36a:	3b c0       	rjmp	.+118    	; 0x3e2 <__vector_40+0xc4>
		case TW_SR_SLA_ACK:	// 0x60: SLA+W received, ACK returned
			break;
		case TW_SR_DATA_ACK:	// 0x80: data received, ACK returned
			twi_buff[byteIndex] = TWDR1;	// Save data to the register address
     36c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     370:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     374:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     378:	e8 0f       	add	r30, r24
     37a:	f1 1d       	adc	r31, r1
     37c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
     380:	80 83       	st	Z, r24
			byteIndex++;
     382:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
		break;
     38c:	2a c0       	rjmp	.+84     	; 0x3e2 <__vector_40+0xc4>
			case TW_SR_STOP:	// 0xA0: stop or repeated start condition received while selected
			twiReady = 1;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <twiReady>
			byteIndex = 0;
     394:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <byteIndex>
		break;
     398:	24 c0       	rjmp	.+72     	; 0x3e2 <__vector_40+0xc4>
			case TW_ST_SLA_ACK:	// 0xA8: SLA+R received, ACK returned {ADDRESS REGISTER or first byte in slave mode}
			TWDR1 = twi_buff[byteIndex];
     39a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     39e:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     3a2:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     3a6:	e8 0f       	add	r30, r24
     3a8:	f1 1d       	adc	r31, r1
     3aa:	80 81       	ld	r24, Z
     3ac:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			byteIndex++;
     3b0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
     3b6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
			break;
     3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <__vector_40+0xc4>
		case TW_ST_DATA_ACK:	// 0xB8: data transmitted, ACK received
			TWDR1 = twi_buff[byteIndex];
     3bc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     3c0:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <twi_buff>
     3c4:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <twi_buff+0x1>
     3c8:	e8 0f       	add	r30, r24
     3ca:	f1 1d       	adc	r31, r1
     3cc:	80 81       	ld	r24, Z
     3ce:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
			byteIndex++;
     3d2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <byteIndex>
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <byteIndex>
			break;
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <__vector_40+0xc4>
		case TW_ST_DATA_NACK:	// 0xC0: data transmitted, NACK received
			byteIndex = 0;
     3de:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <byteIndex>
		case TW_BUS_ERROR:	// 0x00: illegal start or stop condition
			break;
		default:
			break;
	}
	if (twi_mode){TWCR1 |= (1<<TWINT);}// Clear TWINT Flag
     3e2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <twi_mode>
     3e6:	88 23       	and	r24, r24
     3e8:	29 f0       	breq	.+10     	; 0x3f4 <__vector_40+0xd6>
     3ea:	ec ed       	ldi	r30, 0xDC	; 220
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	80 83       	st	Z, r24
	//sei(); // Enable Global Interrupt
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <getKey>:
const char* serial_read_data(void){
	//uint8_t serial_read_data(void){
	read_complete = false;
	rx_count=0;
	return test_array;
}
     406:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <read_complete>
     40a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <keyCode>
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <keyCode>
     414:	08 95       	ret

00000416 <__vector_18>:




ISR(USART0_RX_vect){
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
	tmpkeyChar = UDR0;
     424:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     428:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <tmpkeyChar>
	if (tmpkeyChar != 0xCC){
     42c:	8c 3c       	cpi	r24, 0xCC	; 204
     42e:	31 f0       	breq	.+12     	; 0x43c <__vector_18+0x26>
		read_complete = true;
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <read_complete>
		keyCode = tmpkeyChar;
     436:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <keyCode>
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__vector_18+0x2c>
	}else{
		screenReady = true;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <screenReady>
	}	
}
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_20>:

//memset(rx_buffer, 0, sizeof(rx_buffer));

ISR(USART0_TX_vect){
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	8f 93       	push	r24
	uart_tx_busy = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uart_tx_busy>
}
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <uart_init>:


void uart_init(uint32_t baud,uint8_t high_speed){
	UCSR0B = 0;
     46e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0A = 0;
     472:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	uint8_t speed = 16;
	
	if(high_speed != 0){
     476:	44 23       	and	r20, r20
     478:	39 f0       	breq	.+14     	; 0x488 <uart_init+0x1a>
		speed = 8;
		UCSR0A |= 1 << U2X0;
     47a:	e0 ec       	ldi	r30, 0xC0	; 192
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	20 81       	ld	r18, Z
     480:	22 60       	ori	r18, 0x02	; 2
     482:	20 83       	st	Z, r18
	UCSR0B = 0;
	UCSR0A = 0;
	uint8_t speed = 16;
	
	if(high_speed != 0){
		speed = 8;
     484:	a8 e0       	ldi	r26, 0x08	; 8
     486:	01 c0       	rjmp	.+2      	; 0x48a <uart_init+0x1c>


void uart_init(uint32_t baud,uint8_t high_speed){
	UCSR0B = 0;
	UCSR0A = 0;
	uint8_t speed = 16;
     488:	a0 e1       	ldi	r26, 0x10	; 16
	if(high_speed != 0){
		speed = 8;
		UCSR0A |= 1 << U2X0;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	0e 94 09 05 	call	0xa12	; 0xa12 <__muluhisi3>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	74 e2       	ldi	r23, 0x24	; 36
     49c:	84 ef       	ldi	r24, 0xF4	; 244
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__udivmodsi4>
     4a4:	ba 01       	movw	r22, r20
     4a6:	a9 01       	movw	r20, r18
     4a8:	41 50       	subi	r20, 0x01	; 1
     4aa:	51 09       	sbc	r21, r1
     4ac:	61 09       	sbc	r22, r1
     4ae:	71 09       	sbc	r23, r1
	
	UBRR0H = (baud & 0x0F00) >> 8;
     4b0:	db 01       	movw	r26, r22
     4b2:	ca 01       	movw	r24, r20
     4b4:	88 27       	eor	r24, r24
     4b6:	9f 70       	andi	r25, 0x0F	; 15
     4b8:	aa 27       	eor	r26, r26
     4ba:	bb 27       	eor	r27, r27
     4bc:	89 2f       	mov	r24, r25
     4be:	9a 2f       	mov	r25, r26
     4c0:	ab 2f       	mov	r26, r27
     4c2:	bb 27       	eor	r27, r27
     4c4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (baud & 0x00FF);
     4c8:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
     4cc:	e1 ec       	ldi	r30, 0xC1	; 193
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	88 6d       	ori	r24, 0xD8	; 216
     4d4:	80 83       	st	Z, r24
	UCSR0C=0b10000110;
     4d6:	86 e8       	ldi	r24, 0x86	; 134
     4d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     4dc:	08 95       	ret

000004de <uart_send_byte>:
}


void uart_send_byte(uint8_t c){
	while(uart_tx_busy == 0);
     4de:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <uart_tx_busy>
     4e2:	99 23       	and	r25, r25
     4e4:	e1 f3       	breq	.-8      	; 0x4de <uart_send_byte>
	uart_tx_busy = 0;
     4e6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <uart_tx_busy>
	UDR0 = c;
     4ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     4ee:	08 95       	ret

000004f0 <uart_send_array>:
}

void uart_send_array(uint8_t *c,uint16_t len){
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	7c 01       	movw	r14, r24
     4fe:	8b 01       	movw	r16, r22
	screenReady = false;
     500:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <screenReady>
	for(uint16_t i = 0; i < len;i++){
     504:	c0 e0       	ldi	r28, 0x00	; 0
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	07 c0       	rjmp	.+14     	; 0x518 <uart_send_array+0x28>
		uart_send_byte(c[i]);
     50a:	f7 01       	movw	r30, r14
     50c:	ec 0f       	add	r30, r28
     50e:	fd 1f       	adc	r31, r29
     510:	80 81       	ld	r24, Z
     512:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	UDR0 = c;
}

void uart_send_array(uint8_t *c,uint16_t len){
	screenReady = false;
	for(uint16_t i = 0; i < len;i++){
     516:	21 96       	adiw	r28, 0x01	; 1
     518:	c0 17       	cp	r28, r16
     51a:	d1 07       	cpc	r29, r17
     51c:	b0 f3       	brcs	.-20     	; 0x50a <uart_send_array+0x1a>
		uart_send_byte(c[i]);
	}
	while(screenReady == false);
     51e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <screenReady>
     522:	88 23       	and	r24, r24
     524:	e1 f3       	breq	.-8      	; 0x51e <uart_send_array+0x2e>
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	08 95       	ret

00000534 <uart_send_array_simple>:

void uart_send_array_simple(uint8_t *c,uint16_t len){
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	7c 01       	movw	r14, r24
     542:	8b 01       	movw	r16, r22
	for(uint16_t i = 0; i < len;i++){
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	07 c0       	rjmp	.+14     	; 0x558 <uart_send_array_simple+0x24>
		uart_send_byte(c[i]);
     54a:	f7 01       	movw	r30, r14
     54c:	ec 0f       	add	r30, r28
     54e:	fd 1f       	adc	r31, r29
     550:	80 81       	ld	r24, Z
     552:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	}
	while(screenReady == false);
}

void uart_send_array_simple(uint8_t *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
     556:	21 96       	adiw	r28, 0x01	; 1
     558:	c0 17       	cp	r28, r16
     55a:	d1 07       	cpc	r29, r17
     55c:	b0 f3       	brcs	.-20     	; 0x54a <uart_send_array_simple+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55e:	2f e7       	ldi	r18, 0x7F	; 127
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <uart_send_array_simple+0x30>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <uart_send_array_simple+0x3a>
     56e:	00 00       	nop
		uart_send_byte(c[i]);
	}
	_delay_ms(25);
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <screenInit>:




void screenInit(void){
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	60 97       	sbiw	r28, 0x10	; 16
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
		uart_init(9600,1);
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	60 e8       	ldi	r22, 0x80	; 128
     59a:	75 e2       	ldi	r23, 0x25	; 37
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 37 02 	call	0x46e	; 0x46e <uart_init>
		uart_send_array_simple((uint8_t *)init0, sizeof(init0));
     5a4:	62 e0       	ldi	r22, 0x02	; 2
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	8c e0       	ldi	r24, 0x0C	; 12
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_array_simple>
     5b0:	8f eb       	ldi	r24, 0xBF	; 191
     5b2:	9d e5       	ldi	r25, 0x5D	; 93
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <screenInit+0x36>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <screenInit+0x3c>
     5ba:	00 00       	nop
		_delay_ms(6);
		uart_init(74880,1);
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	60 e8       	ldi	r22, 0x80	; 128
     5c0:	74 e2       	ldi	r23, 0x24	; 36
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 37 02 	call	0x46e	; 0x46e <uart_init>
		uart_send_array_simple((uint8_t *)init1, sizeof(init1));
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_array_simple>
     5d6:	ef e9       	ldi	r30, 0x9F	; 159
     5d8:	ff e0       	ldi	r31, 0x0F	; 15
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <screenInit+0x5c>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <screenInit+0x62>
     5e0:	00 00       	nop
		_delay_ms(1);
		uart_send_array_simple((uint8_t *)init2, sizeof(init2));
     5e2:	62 e0       	ldi	r22, 0x02	; 2
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 9a 02 	call	0x534	; 0x534 <uart_send_array_simple>
     5ee:	8f e3       	ldi	r24, 0x3F	; 63
     5f0:	9c e9       	ldi	r25, 0x9C	; 156
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <screenInit+0x74>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <screenInit+0x7a>
     5f8:	00 00       	nop
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	e5 eb       	ldi	r30, 0xB5	; 181
     5fe:	f5 e3       	ldi	r31, 0x35	; 53
     600:	91 50       	subi	r25, 0x01	; 1
     602:	e0 40       	sbci	r30, 0x00	; 0
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <screenInit+0x82>
     608:	00 c0       	rjmp	.+0      	; 0x60a <screenInit+0x8c>
     60a:	00 00       	nop
		_delay_ms(10);
		//uart_send_array((uint8_t *)init3, sizeof(init3));
		//_delay_ms(10);
		
		_delay_ms(1100);
		uart_send_byte(0xf4);
     60c:	84 ef       	ldi	r24, 0xF4	; 244
     60e:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	81 ee       	ldi	r24, 0xE1	; 225
     616:	94 e0       	ldi	r25, 0x04	; 4
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	80 40       	sbci	r24, 0x00	; 0
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <screenInit+0x9a>
     620:	00 c0       	rjmp	.+0      	; 0x622 <screenInit+0xa4>
     622:	00 00       	nop
		_delay_ms(100);
		
		uint8_t initData[16] = {0xc7, 0x01, 0x0, 0x0, 0x1e, 0x0, 0x03}; //horisontal line
     624:	8e 01       	movw	r16, r28
     626:	0f 5f       	subi	r16, 0xFF	; 255
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	80 e1       	ldi	r24, 0x10	; 16
     62c:	f8 01       	movw	r30, r16
     62e:	11 92       	st	Z+, r1
     630:	8a 95       	dec	r24
     632:	e9 f7       	brne	.-6      	; 0x62e <screenInit+0xb0>
     634:	87 ec       	ldi	r24, 0xC7	; 199
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	8e e1       	ldi	r24, 0x1E	; 30
     63e:	8d 83       	std	Y+5, r24	; 0x05
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	8f 83       	std	Y+7, r24	; 0x07
		uart_send_array((uint8_t *)initData, 7);
     644:	67 e0       	ldi	r22, 0x07	; 7
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	c8 01       	movw	r24, r16
     64a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>
		
		initData[2] = 125;
     64e:	8d e7       	ldi	r24, 0x7D	; 125
     650:	8b 83       	std	Y+3, r24	; 0x03
		uart_send_array((uint8_t *)initData, 7);
     652:	67 e0       	ldi	r22, 0x07	; 7
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	c8 01       	movw	r24, r16
     658:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>
     65c:	ff ef       	ldi	r31, 0xFF	; 255
     65e:	21 ee       	ldi	r18, 0xE1	; 225
     660:	84 e0       	ldi	r24, 0x04	; 4
     662:	f1 50       	subi	r31, 0x01	; 1
     664:	20 40       	sbci	r18, 0x00	; 0
     666:	80 40       	sbci	r24, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <screenInit+0xe4>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <screenInit+0xee>
     66c:	00 00       	nop
		//uint8_t initData1[6] = {0xc5, 0x06, 0xea, 0x00, 0x02, 0x74}; //vertical line
		//uart_send_array((uint8_t *)initData1, 6);
		//_delay_ms(10);
		
		
		uart_send_array((uint8_t *)init3, sizeof(init3));
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>
     67a:	ef e3       	ldi	r30, 0x3F	; 63
     67c:	fc e9       	ldi	r31, 0x9C	; 156
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <screenInit+0x100>
     682:	00 c0       	rjmp	.+0      	; 0x684 <screenInit+0x106>
     684:	00 00       	nop
		_delay_ms(10);

}
     686:	60 96       	adiw	r28, 0x10	; 16
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <screenPrintString>:


void screenPrintString(uint8_t xPox, uint8_t yPox, uint8_t *c, uint8_t selectType){
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	27 97       	sbiw	r28, 0x07	; 7
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	d8 2e       	mov	r13, r24
     6c0:	c6 2e       	mov	r12, r22
     6c2:	7a 01       	movw	r14, r20
     6c4:	b2 2e       	mov	r11, r18
	//if(selectType == 0 || selectType == 1){
		//uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, 10, 0x06, 16};
		//uart_send_array((uint8_t *)tmp, sizeof(tmp));
	//}
	screenReady = false;
     6c6:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <screenReady>
	uint16_t i = 0;
		
	uart_send_byte(0xeb); //0xeb
     6ca:	8b ee       	ldi	r24, 0xEB	; 235
     6cc:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	uart_send_byte(yPox); //0x20
     6d0:	8c 2d       	mov	r24, r12
     6d2:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	uart_send_byte(xPox); //0x0c
     6d6:	8d 2d       	mov	r24, r13
     6d8:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	//if(selectType == 0 || selectType == 1){
		//uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, 10, 0x06, 16};
		//uart_send_array((uint8_t *)tmp, sizeof(tmp));
	//}
	screenReady = false;
	uint16_t i = 0;
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	10 e0       	ldi	r17, 0x00	; 0
	uart_send_byte(0xeb); //0xeb
	uart_send_byte(yPox); //0x20
	uart_send_byte(xPox); //0x0c
	
	do{
		uart_send_byte(c[i]);
     6e0:	f7 01       	movw	r30, r14
     6e2:	e0 0f       	add	r30, r16
     6e4:	f1 1f       	adc	r31, r17
     6e6:	80 81       	ld	r24, Z
     6e8:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
		i++;
     6ec:	0f 5f       	subi	r16, 0xFF	; 255
     6ee:	1f 4f       	sbci	r17, 0xFF	; 255
	}while(c[i] != '\0');
     6f0:	f7 01       	movw	r30, r14
     6f2:	e0 0f       	add	r30, r16
     6f4:	f1 1f       	adc	r31, r17
     6f6:	80 81       	ld	r24, Z
     6f8:	81 11       	cpse	r24, r1
     6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <screenPrintString+0x44>
	uart_send_byte(' ');
     6fc:	80 e2       	ldi	r24, 0x20	; 32
     6fe:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	uart_send_byte(0x0);
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_send_byte>
	while(screenReady == false);
     708:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <screenReady>
     70c:	88 23       	and	r24, r24
     70e:	e1 f3       	breq	.-8      	; 0x708 <screenPrintString+0x6c>
	if(selectType == 2){
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	b8 12       	cpse	r11, r24
     714:	17 c0       	rjmp	.+46     	; 0x744 <screenPrintString+0xa8>
		uint8_t tmp[7] = {0xc7, selectType, yPox, xPox, strlen((char *)c), 0x06, 16};
     716:	87 ec       	ldi	r24, 0xC7	; 199
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	ba 82       	std	Y+2, r11	; 0x02
     71c:	cb 82       	std	Y+3, r12	; 0x03
     71e:	dc 82       	std	Y+4, r13	; 0x04
     720:	f7 01       	movw	r30, r14
     722:	01 90       	ld	r0, Z+
     724:	00 20       	and	r0, r0
     726:	e9 f7       	brne	.-6      	; 0x722 <screenPrintString+0x86>
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	ee 19       	sub	r30, r14
     72c:	ff 09       	sbc	r31, r15
     72e:	ed 83       	std	Y+5, r30	; 0x05
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	8e 83       	std	Y+6, r24	; 0x06
     734:	80 e1       	ldi	r24, 0x10	; 16
     736:	8f 83       	std	Y+7, r24	; 0x07
		uart_send_array((uint8_t *)tmp, sizeof(tmp));
     738:	67 e0       	ldi	r22, 0x07	; 7
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>
	}
	
}
     744:	27 96       	adiw	r28, 0x07	; 7
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	08 95       	ret

00000764 <screenVerticalBar>:



void screenVerticalBar(uint8_t xPox, uint8_t yPox, uint8_t barVal, uint8_t maxHeight){
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2a 97       	sbiw	r28, 0x0a	; 10
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	e6 2e       	mov	r14, r22
     782:	f4 2e       	mov	r15, r20
     784:	02 2f       	mov	r16, r18
	
	uint8_t barProgVertical[10] = {0xfd,0x3c,xPox,0x05,0x01,0xff,0xff,0xff,0xff,0xff};
     786:	9d ef       	ldi	r25, 0xFD	; 253
     788:	99 83       	std	Y+1, r25	; 0x01
     78a:	9c e3       	ldi	r25, 0x3C	; 60
     78c:	9a 83       	std	Y+2, r25	; 0x02
     78e:	8b 83       	std	Y+3, r24	; 0x03
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	8c 83       	std	Y+4, r24	; 0x04
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	8d 83       	std	Y+5, r24	; 0x05
	for (uint8_t i=maxHeight; i>0; i-- ){				
     798:	12 2f       	mov	r17, r18
     79a:	1b c0       	rjmp	.+54     	; 0x7d2 <screenVerticalBar+0x6e>
		
		barProgVertical[1] = (yPox + maxHeight) - i;
     79c:	80 2f       	mov	r24, r16
     79e:	8e 0d       	add	r24, r14
     7a0:	81 1b       	sub	r24, r17
     7a2:	8a 83       	std	Y+2, r24	; 0x02
		
		if(i<=barVal){
     7a4:	f1 16       	cp	r15, r17
     7a6:	38 f0       	brcs	.+14     	; 0x7b6 <screenVerticalBar+0x52>
			barProgVertical[5] = 0xff;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	8e 83       	std	Y+6, r24	; 0x06
			barProgVertical[6] = 0xff;
     7ac:	8f 83       	std	Y+7, r24	; 0x07
			barProgVertical[7] = 0xff;
     7ae:	88 87       	std	Y+8, r24	; 0x08
			barProgVertical[8] = 0xff;
     7b0:	89 87       	std	Y+9, r24	; 0x09
			barProgVertical[9] = 0xff;
     7b2:	8a 87       	std	Y+10, r24	; 0x0a
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <screenVerticalBar+0x60>
			}else{
			barProgVertical[5] = 0x80;
     7b6:	80 e8       	ldi	r24, 0x80	; 128
     7b8:	8e 83       	std	Y+6, r24	; 0x06
			barProgVertical[6] = 0x0;
     7ba:	1f 82       	std	Y+7, r1	; 0x07
			barProgVertical[7] = 0x0;
     7bc:	18 86       	std	Y+8, r1	; 0x08
			barProgVertical[8] = 0x0;
     7be:	19 86       	std	Y+9, r1	; 0x09
			barProgVertical[9] = 0x01;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	8a 87       	std	Y+10, r24	; 0x0a
		}
		uart_send_array(barProgVertical, sizeof(barProgVertical));
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>


void screenVerticalBar(uint8_t xPox, uint8_t yPox, uint8_t barVal, uint8_t maxHeight){
	
	uint8_t barProgVertical[10] = {0xfd,0x3c,xPox,0x05,0x01,0xff,0xff,0xff,0xff,0xff};
	for (uint8_t i=maxHeight; i>0; i-- ){				
     7d0:	11 50       	subi	r17, 0x01	; 1
     7d2:	11 11       	cpse	r17, r1
     7d4:	e3 cf       	rjmp	.-58     	; 0x79c <screenVerticalBar+0x38>
			barProgVertical[9] = 0x01;
		}
		uart_send_array(barProgVertical, sizeof(barProgVertical));
		
	}
	barProgVertical[5] = 0xff;
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	8e 83       	std	Y+6, r24	; 0x06
	barProgVertical[6] = 0xff;
     7da:	8f 83       	std	Y+7, r24	; 0x07
	barProgVertical[7] = 0xff;
     7dc:	88 87       	std	Y+8, r24	; 0x08
	barProgVertical[8] = 0xff;
     7de:	89 87       	std	Y+9, r24	; 0x09
	barProgVertical[9] = 0xff;
     7e0:	8a 87       	std	Y+10, r24	; 0x0a
	uart_send_array(barProgVertical, sizeof(barProgVertical));
     7e2:	6a e0       	ldi	r22, 0x0A	; 10
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart_send_array>
}
     7ee:	2a 96       	adiw	r28, 0x0a	; 10
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	08 95       	ret

00000808 <main>:

//uint8_t initData[16];
int main(void)
{
    char char_array[128]="test_data\0";
    uart_init(9600,1);
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	60 e8       	ldi	r22, 0x80	; 128
     80c:	75 e2       	ldi	r23, 0x25	; 37
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 37 02 	call	0x46e	; 0x46e <uart_init>
    //twi1_init(400000);
    
    
    gpio_set_pin_direction(&dev1[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev1[RED], true);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	83 e2       	ldi	r24, 0x23	; 35
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	83 e2       	ldi	r24, 0x23	; 35
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    gpio_set_pin_direction(&dev1[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev1[GREEN], true);
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	86 e2       	ldi	r24, 0x26	; 38
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	86 e2       	ldi	r24, 0x26	; 38
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    
    gpio_set_pin_direction(&dev2[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev2[RED], true);
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	8a e1       	ldi	r24, 0x1A	; 26
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	8a e1       	ldi	r24, 0x1A	; 26
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    gpio_set_pin_direction(&dev2[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev2[GREEN], true);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	8d e1       	ldi	r24, 0x1D	; 29
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	8d e1       	ldi	r24, 0x1D	; 29
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    
    gpio_set_pin_direction(&dev3[RED] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[RED], true);
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	81 e1       	ldi	r24, 0x11	; 17
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	81 e1       	ldi	r24, 0x11	; 17
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    gpio_set_pin_direction(&dev3[GREEN] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[GREEN], true);
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	84 e1       	ldi	r24, 0x14	; 20
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	84 e1       	ldi	r24, 0x14	; 20
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
    gpio_set_pin_direction(&dev3[BLUE] , PORT_DIR_OUT); gpio_set_pin_level(&dev3[BLUE], true);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	87 e1       	ldi	r24, 0x17	; 23
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 b1 00 	call	0x162	; 0x162 <gpio_set_pin_direction>
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	87 e1       	ldi	r24, 0x17	; 23
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 88 00 	call	0x110	; 0x110 <gpio_set_pin_level>
	
	sei();
     8a2:	78 94       	sei
	stdout = &mystdout;
     8a4:	89 e2       	ldi	r24, 0x29	; 41
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <__iob+0x3>
     8ac:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <__iob+0x2>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	39 e6       	ldi	r19, 0x69	; 105
     8b4:	88 e1       	ldi	r24, 0x18	; 24
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	30 40       	sbci	r19, 0x00	; 0
     8ba:	80 40       	sbci	r24, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <main+0xae>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <main+0xb8>
     8c0:	00 00       	nop
	_delay_ms(500);
	screenInit();
     8c2:	0e 94 bf 02 	call	0x57e	; 0x57e <screenInit>
	

	while (1) 
    {
		gpio_toggle_pin_level(&dev3[BLUE]);
     8c6:	87 e1       	ldi	r24, 0x17	; 23
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <gpio_toggle_pin_level>
		
		if(serial_complete){
			uint8_t key = getKey();
     8ce:	0e 94 03 02 	call	0x406	; 0x406 <getKey>
			if(key == 0x00){
				//gpio_toggle_pin_level(&dev1[RED]);	
			}
			if(key == 0x01){
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	39 f4       	brne	.+14     	; 0x8e4 <main+0xdc>
				//gpio_toggle_pin_level(&dev1[GREEN]);
				if(menuPointer < 3){
     8d6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <menuPointer>
     8da:	93 30       	cpi	r25, 0x03	; 3
     8dc:	18 f4       	brcc	.+6      	; 0x8e4 <main+0xdc>
					menuPointer++;
     8de:	9f 5f       	subi	r25, 0xFF	; 255
     8e0:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <menuPointer>
				}
			}
			if(key == 0x02){
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	39 f4       	brne	.+14     	; 0x8f6 <main+0xee>
				//gpio_toggle_pin_level(&dev2[RED]);
				if(menuPointer != 0){
     8e8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <menuPointer>
     8ec:	88 23       	and	r24, r24
     8ee:	19 f0       	breq	.+6      	; 0x8f6 <main+0xee>
					menuPointer--;
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <menuPointer>
				//gpio_toggle_pin_level(&dev2[GREEN]);
			}			
		}
		
		
		sprintf(measBuffer, "Val=%02d; %d", 11, menuPointer); 
     8f6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <menuPointer>
     8fa:	1f 92       	push	r1
     8fc:	8f 93       	push	r24
     8fe:	1f 92       	push	r1
     900:	8b e0       	ldi	r24, 0x0B	; 11
     902:	8f 93       	push	r24
     904:	87 e3       	ldi	r24, 0x37	; 55
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	88 e8       	ldi	r24, 0x88	; 136
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	0e 94 23 05 	call	0xa46	; 0xa46 <sprintf>
		screenPrintString(3, 6, (uint8_t *)"NEW OIL", 0);
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	44 e4       	ldi	r20, 0x44	; 68
     91c:	51 e0       	ldi	r21, 0x01	; 1
     91e:	66 e0       	ldi	r22, 0x06	; 6
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		screenPrintString(8, 24, (uint8_t *)"10.5L", 0);
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	4c e4       	ldi	r20, 0x4C	; 76
     92a:	51 e0       	ldi	r21, 0x01	; 1
     92c:	68 e1       	ldi	r22, 0x18	; 24
     92e:	88 e0       	ldi	r24, 0x08	; 8
     930:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		screenPrintString(75, 0x03, (uint8_t *)"SW ver 0.1a", 0);
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	42 e5       	ldi	r20, 0x52	; 82
     938:	51 e0       	ldi	r21, 0x01	; 1
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	8b e4       	ldi	r24, 0x4B	; 75
     93e:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		
		
		screenPrintString(184, 6, (uint8_t *)"OLD OIL", 0);
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	4e e5       	ldi	r20, 0x5E	; 94
     946:	51 e0       	ldi	r21, 0x01	; 1
     948:	66 e0       	ldi	r22, 0x06	; 6
     94a:	88 eb       	ldi	r24, 0xB8	; 184
     94c:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		screenPrintString(192, 24, (uint8_t *)"17.3L", 0);
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	46 e6       	ldi	r20, 0x66	; 102
     954:	51 e0       	ldi	r21, 0x01	; 1
     956:	68 e1       	ldi	r22, 0x18	; 24
     958:	80 ec       	ldi	r24, 0xC0	; 192
     95a:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>

		screenVerticalBar(8, 44, 40, 80);
     95e:	20 e5       	ldi	r18, 0x50	; 80
     960:	48 e2       	ldi	r20, 0x28	; 40
     962:	6c e2       	ldi	r22, 0x2C	; 44
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	0e 94 b2 03 	call	0x764	; 0x764 <screenVerticalBar>
		screenVerticalBar(192, 44, 60, 80);
     96a:	20 e5       	ldi	r18, 0x50	; 80
     96c:	4c e3       	ldi	r20, 0x3C	; 60
     96e:	6c e2       	ldi	r22, 0x2C	; 44
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	0e 94 b2 03 	call	0x764	; 0x764 <screenVerticalBar>
		
		
		//Menu
		uint8_t preselect = 0;
		preselect = (menuPointer == 0) ? 2 : 0;
     976:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <menuPointer>
     97a:	2d b7       	in	r18, 0x3d	; 61
     97c:	3e b7       	in	r19, 0x3e	; 62
     97e:	28 5f       	subi	r18, 0xF8	; 248
     980:	3f 4f       	sbci	r19, 0xFF	; 255
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	3e bf       	out	0x3e, r19	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	2d bf       	out	0x3d, r18	; 61
     98c:	81 11       	cpse	r24, r1
     98e:	02 c0       	rjmp	.+4      	; 0x994 <__stack+0x95>
     990:	22 e0       	ldi	r18, 0x02	; 2
     992:	01 c0       	rjmp	.+2      	; 0x996 <__stack+0x97>
     994:	20 e0       	ldi	r18, 0x00	; 0
		screenPrintString(75, 60, (uint8_t *)"Empty tank", preselect);
     996:	4c e6       	ldi	r20, 0x6C	; 108
     998:	51 e0       	ldi	r21, 0x01	; 1
     99a:	6c e3       	ldi	r22, 0x3C	; 60
     99c:	8b e4       	ldi	r24, 0x4B	; 75
     99e:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		preselect = (menuPointer == 1) ? 2 : 0;
     9a2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <menuPointer>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	11 f4       	brne	.+4      	; 0x9ae <__stack+0xaf>
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
		screenPrintString(75, 77, (uint8_t *)"Run cycle", preselect);
     9b0:	47 e7       	ldi	r20, 0x77	; 119
     9b2:	51 e0       	ldi	r21, 0x01	; 1
     9b4:	6d e4       	ldi	r22, 0x4D	; 77
     9b6:	8b e4       	ldi	r24, 0x4B	; 75
     9b8:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		preselect = (menuPointer == 2) ? 2 : 0;
     9bc:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <menuPointer>
		screenPrintString(75, 94, measBuffer, menuPointer);
     9c0:	48 e8       	ldi	r20, 0x88	; 136
     9c2:	51 e0       	ldi	r21, 0x01	; 1
     9c4:	6e e5       	ldi	r22, 0x5E	; 94
     9c6:	8b e4       	ldi	r24, 0x4B	; 75
     9c8:	0e 94 4e 03 	call	0x69c	; 0x69c <screenPrintString>
		
    }
     9cc:	7c cf       	rjmp	.-264    	; 0x8c6 <main+0xbe>

000009ce <__udivmodsi4>:
     9ce:	a1 e2       	ldi	r26, 0x21	; 33
     9d0:	1a 2e       	mov	r1, r26
     9d2:	aa 1b       	sub	r26, r26
     9d4:	bb 1b       	sub	r27, r27
     9d6:	fd 01       	movw	r30, r26
     9d8:	0d c0       	rjmp	.+26     	; 0x9f4 <__udivmodsi4_ep>

000009da <__udivmodsi4_loop>:
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	ee 1f       	adc	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	a2 17       	cp	r26, r18
     9e4:	b3 07       	cpc	r27, r19
     9e6:	e4 07       	cpc	r30, r20
     9e8:	f5 07       	cpc	r31, r21
     9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__udivmodsi4_ep>
     9ec:	a2 1b       	sub	r26, r18
     9ee:	b3 0b       	sbc	r27, r19
     9f0:	e4 0b       	sbc	r30, r20
     9f2:	f5 0b       	sbc	r31, r21

000009f4 <__udivmodsi4_ep>:
     9f4:	66 1f       	adc	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	88 1f       	adc	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	1a 94       	dec	r1
     9fe:	69 f7       	brne	.-38     	; 0x9da <__udivmodsi4_loop>
     a00:	60 95       	com	r22
     a02:	70 95       	com	r23
     a04:	80 95       	com	r24
     a06:	90 95       	com	r25
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	bd 01       	movw	r22, r26
     a0e:	cf 01       	movw	r24, r30
     a10:	08 95       	ret

00000a12 <__muluhisi3>:
     a12:	0e 94 14 05 	call	0xa28	; 0xa28 <__umulhisi3>
     a16:	a5 9f       	mul	r26, r21
     a18:	90 0d       	add	r25, r0
     a1a:	b4 9f       	mul	r27, r20
     a1c:	90 0d       	add	r25, r0
     a1e:	a4 9f       	mul	r26, r20
     a20:	80 0d       	add	r24, r0
     a22:	91 1d       	adc	r25, r1
     a24:	11 24       	eor	r1, r1
     a26:	08 95       	ret

00000a28 <__umulhisi3>:
     a28:	a2 9f       	mul	r26, r18
     a2a:	b0 01       	movw	r22, r0
     a2c:	b3 9f       	mul	r27, r19
     a2e:	c0 01       	movw	r24, r0
     a30:	a3 9f       	mul	r26, r19
     a32:	70 0d       	add	r23, r0
     a34:	81 1d       	adc	r24, r1
     a36:	11 24       	eor	r1, r1
     a38:	91 1d       	adc	r25, r1
     a3a:	b2 9f       	mul	r27, r18
     a3c:	70 0d       	add	r23, r0
     a3e:	81 1d       	adc	r24, r1
     a40:	11 24       	eor	r1, r1
     a42:	91 1d       	adc	r25, r1
     a44:	08 95       	ret

00000a46 <sprintf>:
     a46:	ae e0       	ldi	r26, 0x0E	; 14
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__prologue_saves__+0x1c>
     a52:	0d 89       	ldd	r16, Y+21	; 0x15
     a54:	1e 89       	ldd	r17, Y+22	; 0x16
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	8c 83       	std	Y+4, r24	; 0x04
     a5a:	1a 83       	std	Y+2, r17	; 0x02
     a5c:	09 83       	std	Y+1, r16	; 0x01
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	9f e7       	ldi	r25, 0x7F	; 127
     a62:	9e 83       	std	Y+6, r25	; 0x06
     a64:	8d 83       	std	Y+5, r24	; 0x05
     a66:	ae 01       	movw	r20, r28
     a68:	47 5e       	subi	r20, 0xE7	; 231
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	6f 89       	ldd	r22, Y+23	; 0x17
     a6e:	78 8d       	ldd	r23, Y+24	; 0x18
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	0e 94 45 05 	call	0xa8a	; 0xa8a <vfprintf>
     a78:	ef 81       	ldd	r30, Y+7	; 0x07
     a7a:	f8 85       	ldd	r31, Y+8	; 0x08
     a7c:	e0 0f       	add	r30, r16
     a7e:	f1 1f       	adc	r31, r17
     a80:	10 82       	st	Z, r1
     a82:	2e 96       	adiw	r28, 0x0e	; 14
     a84:	e4 e0       	ldi	r30, 0x04	; 4
     a86:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__epilogue_restores__+0x1c>

00000a8a <vfprintf>:
     a8a:	ab e0       	ldi	r26, 0x0B	; 11
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	eb e4       	ldi	r30, 0x4B	; 75
     a90:	f5 e0       	ldi	r31, 0x05	; 5
     a92:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__prologue_saves__>
     a96:	6c 01       	movw	r12, r24
     a98:	7b 01       	movw	r14, r22
     a9a:	8a 01       	movw	r16, r20
     a9c:	fc 01       	movw	r30, r24
     a9e:	17 82       	std	Z+7, r1	; 0x07
     aa0:	16 82       	std	Z+6, r1	; 0x06
     aa2:	83 81       	ldd	r24, Z+3	; 0x03
     aa4:	81 ff       	sbrs	r24, 1
     aa6:	cc c1       	rjmp	.+920    	; 0xe40 <vfprintf+0x3b6>
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	3c 01       	movw	r6, r24
     aae:	f6 01       	movw	r30, r12
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	f7 01       	movw	r30, r14
     ab4:	93 fd       	sbrc	r25, 3
     ab6:	85 91       	lpm	r24, Z+
     ab8:	93 ff       	sbrs	r25, 3
     aba:	81 91       	ld	r24, Z+
     abc:	7f 01       	movw	r14, r30
     abe:	88 23       	and	r24, r24
     ac0:	09 f4       	brne	.+2      	; 0xac4 <vfprintf+0x3a>
     ac2:	ba c1       	rjmp	.+884    	; 0xe38 <vfprintf+0x3ae>
     ac4:	85 32       	cpi	r24, 0x25	; 37
     ac6:	39 f4       	brne	.+14     	; 0xad6 <vfprintf+0x4c>
     ac8:	93 fd       	sbrc	r25, 3
     aca:	85 91       	lpm	r24, Z+
     acc:	93 ff       	sbrs	r25, 3
     ace:	81 91       	ld	r24, Z+
     ad0:	7f 01       	movw	r14, r30
     ad2:	85 32       	cpi	r24, 0x25	; 37
     ad4:	29 f4       	brne	.+10     	; 0xae0 <vfprintf+0x56>
     ad6:	b6 01       	movw	r22, r12
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     ade:	e7 cf       	rjmp	.-50     	; 0xaae <vfprintf+0x24>
     ae0:	91 2c       	mov	r9, r1
     ae2:	21 2c       	mov	r2, r1
     ae4:	31 2c       	mov	r3, r1
     ae6:	ff e1       	ldi	r31, 0x1F	; 31
     ae8:	f3 15       	cp	r31, r3
     aea:	d8 f0       	brcs	.+54     	; 0xb22 <vfprintf+0x98>
     aec:	8b 32       	cpi	r24, 0x2B	; 43
     aee:	79 f0       	breq	.+30     	; 0xb0e <vfprintf+0x84>
     af0:	38 f4       	brcc	.+14     	; 0xb00 <vfprintf+0x76>
     af2:	80 32       	cpi	r24, 0x20	; 32
     af4:	79 f0       	breq	.+30     	; 0xb14 <vfprintf+0x8a>
     af6:	83 32       	cpi	r24, 0x23	; 35
     af8:	a1 f4       	brne	.+40     	; 0xb22 <vfprintf+0x98>
     afa:	23 2d       	mov	r18, r3
     afc:	20 61       	ori	r18, 0x10	; 16
     afe:	1d c0       	rjmp	.+58     	; 0xb3a <vfprintf+0xb0>
     b00:	8d 32       	cpi	r24, 0x2D	; 45
     b02:	61 f0       	breq	.+24     	; 0xb1c <vfprintf+0x92>
     b04:	80 33       	cpi	r24, 0x30	; 48
     b06:	69 f4       	brne	.+26     	; 0xb22 <vfprintf+0x98>
     b08:	23 2d       	mov	r18, r3
     b0a:	21 60       	ori	r18, 0x01	; 1
     b0c:	16 c0       	rjmp	.+44     	; 0xb3a <vfprintf+0xb0>
     b0e:	83 2d       	mov	r24, r3
     b10:	82 60       	ori	r24, 0x02	; 2
     b12:	38 2e       	mov	r3, r24
     b14:	e3 2d       	mov	r30, r3
     b16:	e4 60       	ori	r30, 0x04	; 4
     b18:	3e 2e       	mov	r3, r30
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <vfprintf+0xe6>
     b1c:	f3 2d       	mov	r31, r3
     b1e:	f8 60       	ori	r31, 0x08	; 8
     b20:	1d c0       	rjmp	.+58     	; 0xb5c <vfprintf+0xd2>
     b22:	37 fc       	sbrc	r3, 7
     b24:	2d c0       	rjmp	.+90     	; 0xb80 <vfprintf+0xf6>
     b26:	20 ed       	ldi	r18, 0xD0	; 208
     b28:	28 0f       	add	r18, r24
     b2a:	2a 30       	cpi	r18, 0x0A	; 10
     b2c:	40 f0       	brcs	.+16     	; 0xb3e <vfprintf+0xb4>
     b2e:	8e 32       	cpi	r24, 0x2E	; 46
     b30:	b9 f4       	brne	.+46     	; 0xb60 <vfprintf+0xd6>
     b32:	36 fc       	sbrc	r3, 6
     b34:	81 c1       	rjmp	.+770    	; 0xe38 <vfprintf+0x3ae>
     b36:	23 2d       	mov	r18, r3
     b38:	20 64       	ori	r18, 0x40	; 64
     b3a:	32 2e       	mov	r3, r18
     b3c:	19 c0       	rjmp	.+50     	; 0xb70 <vfprintf+0xe6>
     b3e:	36 fe       	sbrs	r3, 6
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <vfprintf+0xc4>
     b42:	8a e0       	ldi	r24, 0x0A	; 10
     b44:	98 9e       	mul	r9, r24
     b46:	20 0d       	add	r18, r0
     b48:	11 24       	eor	r1, r1
     b4a:	92 2e       	mov	r9, r18
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <vfprintf+0xe6>
     b4e:	ea e0       	ldi	r30, 0x0A	; 10
     b50:	2e 9e       	mul	r2, r30
     b52:	20 0d       	add	r18, r0
     b54:	11 24       	eor	r1, r1
     b56:	22 2e       	mov	r2, r18
     b58:	f3 2d       	mov	r31, r3
     b5a:	f0 62       	ori	r31, 0x20	; 32
     b5c:	3f 2e       	mov	r3, r31
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <vfprintf+0xe6>
     b60:	8c 36       	cpi	r24, 0x6C	; 108
     b62:	21 f4       	brne	.+8      	; 0xb6c <vfprintf+0xe2>
     b64:	83 2d       	mov	r24, r3
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	38 2e       	mov	r3, r24
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0xe6>
     b6c:	88 36       	cpi	r24, 0x68	; 104
     b6e:	41 f4       	brne	.+16     	; 0xb80 <vfprintf+0xf6>
     b70:	f7 01       	movw	r30, r14
     b72:	93 fd       	sbrc	r25, 3
     b74:	85 91       	lpm	r24, Z+
     b76:	93 ff       	sbrs	r25, 3
     b78:	81 91       	ld	r24, Z+
     b7a:	7f 01       	movw	r14, r30
     b7c:	81 11       	cpse	r24, r1
     b7e:	b3 cf       	rjmp	.-154    	; 0xae6 <vfprintf+0x5c>
     b80:	98 2f       	mov	r25, r24
     b82:	9f 7d       	andi	r25, 0xDF	; 223
     b84:	95 54       	subi	r25, 0x45	; 69
     b86:	93 30       	cpi	r25, 0x03	; 3
     b88:	28 f4       	brcc	.+10     	; 0xb94 <vfprintf+0x10a>
     b8a:	0c 5f       	subi	r16, 0xFC	; 252
     b8c:	1f 4f       	sbci	r17, 0xFF	; 255
     b8e:	9f e3       	ldi	r25, 0x3F	; 63
     b90:	99 83       	std	Y+1, r25	; 0x01
     b92:	0d c0       	rjmp	.+26     	; 0xbae <vfprintf+0x124>
     b94:	83 36       	cpi	r24, 0x63	; 99
     b96:	31 f0       	breq	.+12     	; 0xba4 <vfprintf+0x11a>
     b98:	83 37       	cpi	r24, 0x73	; 115
     b9a:	71 f0       	breq	.+28     	; 0xbb8 <vfprintf+0x12e>
     b9c:	83 35       	cpi	r24, 0x53	; 83
     b9e:	09 f0       	breq	.+2      	; 0xba2 <vfprintf+0x118>
     ba0:	59 c0       	rjmp	.+178    	; 0xc54 <vfprintf+0x1ca>
     ba2:	21 c0       	rjmp	.+66     	; 0xbe6 <vfprintf+0x15c>
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	0e 5f       	subi	r16, 0xFE	; 254
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
     bae:	88 24       	eor	r8, r8
     bb0:	83 94       	inc	r8
     bb2:	91 2c       	mov	r9, r1
     bb4:	53 01       	movw	r10, r6
     bb6:	13 c0       	rjmp	.+38     	; 0xbde <vfprintf+0x154>
     bb8:	28 01       	movw	r4, r16
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	4f 0e       	add	r4, r31
     bbe:	51 1c       	adc	r5, r1
     bc0:	f8 01       	movw	r30, r16
     bc2:	a0 80       	ld	r10, Z
     bc4:	b1 80       	ldd	r11, Z+1	; 0x01
     bc6:	36 fe       	sbrs	r3, 6
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <vfprintf+0x146>
     bca:	69 2d       	mov	r22, r9
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <vfprintf+0x14a>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	c5 01       	movw	r24, r10
     bd6:	0e 94 31 07 	call	0xe62	; 0xe62 <strnlen>
     bda:	4c 01       	movw	r8, r24
     bdc:	82 01       	movw	r16, r4
     bde:	f3 2d       	mov	r31, r3
     be0:	ff 77       	andi	r31, 0x7F	; 127
     be2:	3f 2e       	mov	r3, r31
     be4:	16 c0       	rjmp	.+44     	; 0xc12 <vfprintf+0x188>
     be6:	28 01       	movw	r4, r16
     be8:	22 e0       	ldi	r18, 0x02	; 2
     bea:	42 0e       	add	r4, r18
     bec:	51 1c       	adc	r5, r1
     bee:	f8 01       	movw	r30, r16
     bf0:	a0 80       	ld	r10, Z
     bf2:	b1 80       	ldd	r11, Z+1	; 0x01
     bf4:	36 fe       	sbrs	r3, 6
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <vfprintf+0x174>
     bf8:	69 2d       	mov	r22, r9
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x178>
     bfe:	6f ef       	ldi	r22, 0xFF	; 255
     c00:	7f ef       	ldi	r23, 0xFF	; 255
     c02:	c5 01       	movw	r24, r10
     c04:	0e 94 26 07 	call	0xe4c	; 0xe4c <strnlen_P>
     c08:	4c 01       	movw	r8, r24
     c0a:	f3 2d       	mov	r31, r3
     c0c:	f0 68       	ori	r31, 0x80	; 128
     c0e:	3f 2e       	mov	r3, r31
     c10:	82 01       	movw	r16, r4
     c12:	33 fc       	sbrc	r3, 3
     c14:	1b c0       	rjmp	.+54     	; 0xc4c <vfprintf+0x1c2>
     c16:	82 2d       	mov	r24, r2
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	88 16       	cp	r8, r24
     c1c:	99 06       	cpc	r9, r25
     c1e:	b0 f4       	brcc	.+44     	; 0xc4c <vfprintf+0x1c2>
     c20:	b6 01       	movw	r22, r12
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     c2a:	2a 94       	dec	r2
     c2c:	f4 cf       	rjmp	.-24     	; 0xc16 <vfprintf+0x18c>
     c2e:	f5 01       	movw	r30, r10
     c30:	37 fc       	sbrc	r3, 7
     c32:	85 91       	lpm	r24, Z+
     c34:	37 fe       	sbrs	r3, 7
     c36:	81 91       	ld	r24, Z+
     c38:	5f 01       	movw	r10, r30
     c3a:	b6 01       	movw	r22, r12
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     c42:	21 10       	cpse	r2, r1
     c44:	2a 94       	dec	r2
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	82 1a       	sub	r8, r18
     c4a:	91 08       	sbc	r9, r1
     c4c:	81 14       	cp	r8, r1
     c4e:	91 04       	cpc	r9, r1
     c50:	71 f7       	brne	.-36     	; 0xc2e <vfprintf+0x1a4>
     c52:	e8 c0       	rjmp	.+464    	; 0xe24 <vfprintf+0x39a>
     c54:	84 36       	cpi	r24, 0x64	; 100
     c56:	11 f0       	breq	.+4      	; 0xc5c <vfprintf+0x1d2>
     c58:	89 36       	cpi	r24, 0x69	; 105
     c5a:	41 f5       	brne	.+80     	; 0xcac <vfprintf+0x222>
     c5c:	f8 01       	movw	r30, r16
     c5e:	37 fe       	sbrs	r3, 7
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <vfprintf+0x1e6>
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	0c 5f       	subi	r16, 0xFC	; 252
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <vfprintf+0x1f6>
     c70:	60 81       	ld	r22, Z
     c72:	71 81       	ldd	r23, Z+1	; 0x01
     c74:	07 2e       	mov	r0, r23
     c76:	00 0c       	add	r0, r0
     c78:	88 0b       	sbc	r24, r24
     c7a:	99 0b       	sbc	r25, r25
     c7c:	0e 5f       	subi	r16, 0xFE	; 254
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
     c80:	f3 2d       	mov	r31, r3
     c82:	ff 76       	andi	r31, 0x6F	; 111
     c84:	3f 2e       	mov	r3, r31
     c86:	97 ff       	sbrs	r25, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <vfprintf+0x212>
     c8a:	90 95       	com	r25
     c8c:	80 95       	com	r24
     c8e:	70 95       	com	r23
     c90:	61 95       	neg	r22
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	8f 4f       	sbci	r24, 0xFF	; 255
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	f0 68       	ori	r31, 0x80	; 128
     c9a:	3f 2e       	mov	r3, r31
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	a3 01       	movw	r20, r6
     ca2:	0e 94 78 07 	call	0xef0	; 0xef0 <__ultoa_invert>
     ca6:	88 2e       	mov	r8, r24
     ca8:	86 18       	sub	r8, r6
     caa:	45 c0       	rjmp	.+138    	; 0xd36 <vfprintf+0x2ac>
     cac:	85 37       	cpi	r24, 0x75	; 117
     cae:	31 f4       	brne	.+12     	; 0xcbc <vfprintf+0x232>
     cb0:	23 2d       	mov	r18, r3
     cb2:	2f 7e       	andi	r18, 0xEF	; 239
     cb4:	b2 2e       	mov	r11, r18
     cb6:	2a e0       	ldi	r18, 0x0A	; 10
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	25 c0       	rjmp	.+74     	; 0xd06 <vfprintf+0x27c>
     cbc:	93 2d       	mov	r25, r3
     cbe:	99 7f       	andi	r25, 0xF9	; 249
     cc0:	b9 2e       	mov	r11, r25
     cc2:	8f 36       	cpi	r24, 0x6F	; 111
     cc4:	c1 f0       	breq	.+48     	; 0xcf6 <vfprintf+0x26c>
     cc6:	18 f4       	brcc	.+6      	; 0xcce <vfprintf+0x244>
     cc8:	88 35       	cpi	r24, 0x58	; 88
     cca:	79 f0       	breq	.+30     	; 0xcea <vfprintf+0x260>
     ccc:	b5 c0       	rjmp	.+362    	; 0xe38 <vfprintf+0x3ae>
     cce:	80 37       	cpi	r24, 0x70	; 112
     cd0:	19 f0       	breq	.+6      	; 0xcd8 <vfprintf+0x24e>
     cd2:	88 37       	cpi	r24, 0x78	; 120
     cd4:	21 f0       	breq	.+8      	; 0xcde <vfprintf+0x254>
     cd6:	b0 c0       	rjmp	.+352    	; 0xe38 <vfprintf+0x3ae>
     cd8:	e9 2f       	mov	r30, r25
     cda:	e0 61       	ori	r30, 0x10	; 16
     cdc:	be 2e       	mov	r11, r30
     cde:	b4 fe       	sbrs	r11, 4
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <vfprintf+0x272>
     ce2:	fb 2d       	mov	r31, r11
     ce4:	f4 60       	ori	r31, 0x04	; 4
     ce6:	bf 2e       	mov	r11, r31
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <vfprintf+0x272>
     cea:	34 fe       	sbrs	r3, 4
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <vfprintf+0x278>
     cee:	29 2f       	mov	r18, r25
     cf0:	26 60       	ori	r18, 0x06	; 6
     cf2:	b2 2e       	mov	r11, r18
     cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x278>
     cf6:	28 e0       	ldi	r18, 0x08	; 8
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <vfprintf+0x27c>
     cfc:	20 e1       	ldi	r18, 0x10	; 16
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <vfprintf+0x27c>
     d02:	20 e1       	ldi	r18, 0x10	; 16
     d04:	32 e0       	ldi	r19, 0x02	; 2
     d06:	f8 01       	movw	r30, r16
     d08:	b7 fe       	sbrs	r11, 7
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <vfprintf+0x290>
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	0c 5f       	subi	r16, 0xFC	; 252
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <vfprintf+0x29c>
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 5f       	subi	r16, 0xFE	; 254
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	a3 01       	movw	r20, r6
     d28:	0e 94 78 07 	call	0xef0	; 0xef0 <__ultoa_invert>
     d2c:	88 2e       	mov	r8, r24
     d2e:	86 18       	sub	r8, r6
     d30:	fb 2d       	mov	r31, r11
     d32:	ff 77       	andi	r31, 0x7F	; 127
     d34:	3f 2e       	mov	r3, r31
     d36:	36 fe       	sbrs	r3, 6
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <vfprintf+0x2ca>
     d3a:	23 2d       	mov	r18, r3
     d3c:	2e 7f       	andi	r18, 0xFE	; 254
     d3e:	a2 2e       	mov	r10, r18
     d40:	89 14       	cp	r8, r9
     d42:	58 f4       	brcc	.+22     	; 0xd5a <vfprintf+0x2d0>
     d44:	34 fe       	sbrs	r3, 4
     d46:	0b c0       	rjmp	.+22     	; 0xd5e <vfprintf+0x2d4>
     d48:	32 fc       	sbrc	r3, 2
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <vfprintf+0x2d4>
     d4c:	83 2d       	mov	r24, r3
     d4e:	8e 7e       	andi	r24, 0xEE	; 238
     d50:	a8 2e       	mov	r10, r24
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <vfprintf+0x2d4>
     d54:	b8 2c       	mov	r11, r8
     d56:	a3 2c       	mov	r10, r3
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <vfprintf+0x2d6>
     d5a:	b8 2c       	mov	r11, r8
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <vfprintf+0x2d6>
     d5e:	b9 2c       	mov	r11, r9
     d60:	a4 fe       	sbrs	r10, 4
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <vfprintf+0x2f8>
     d64:	fe 01       	movw	r30, r28
     d66:	e8 0d       	add	r30, r8
     d68:	f1 1d       	adc	r31, r1
     d6a:	80 81       	ld	r24, Z
     d6c:	80 33       	cpi	r24, 0x30	; 48
     d6e:	21 f4       	brne	.+8      	; 0xd78 <vfprintf+0x2ee>
     d70:	9a 2d       	mov	r25, r10
     d72:	99 7e       	andi	r25, 0xE9	; 233
     d74:	a9 2e       	mov	r10, r25
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <vfprintf+0x300>
     d78:	a2 fe       	sbrs	r10, 2
     d7a:	06 c0       	rjmp	.+12     	; 0xd88 <vfprintf+0x2fe>
     d7c:	b3 94       	inc	r11
     d7e:	b3 94       	inc	r11
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <vfprintf+0x300>
     d82:	8a 2d       	mov	r24, r10
     d84:	86 78       	andi	r24, 0x86	; 134
     d86:	09 f0       	breq	.+2      	; 0xd8a <vfprintf+0x300>
     d88:	b3 94       	inc	r11
     d8a:	a3 fc       	sbrc	r10, 3
     d8c:	11 c0       	rjmp	.+34     	; 0xdb0 <vfprintf+0x326>
     d8e:	a0 fe       	sbrs	r10, 0
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <vfprintf+0x314>
     d92:	b2 14       	cp	r11, r2
     d94:	88 f4       	brcc	.+34     	; 0xdb8 <vfprintf+0x32e>
     d96:	28 0c       	add	r2, r8
     d98:	92 2c       	mov	r9, r2
     d9a:	9b 18       	sub	r9, r11
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <vfprintf+0x330>
     d9e:	b2 14       	cp	r11, r2
     da0:	60 f4       	brcc	.+24     	; 0xdba <vfprintf+0x330>
     da2:	b6 01       	movw	r22, r12
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     dac:	b3 94       	inc	r11
     dae:	f7 cf       	rjmp	.-18     	; 0xd9e <vfprintf+0x314>
     db0:	b2 14       	cp	r11, r2
     db2:	18 f4       	brcc	.+6      	; 0xdba <vfprintf+0x330>
     db4:	2b 18       	sub	r2, r11
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x332>
     db8:	98 2c       	mov	r9, r8
     dba:	21 2c       	mov	r2, r1
     dbc:	a4 fe       	sbrs	r10, 4
     dbe:	10 c0       	rjmp	.+32     	; 0xde0 <vfprintf+0x356>
     dc0:	b6 01       	movw	r22, r12
     dc2:	80 e3       	ldi	r24, 0x30	; 48
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     dca:	a2 fe       	sbrs	r10, 2
     dcc:	17 c0       	rjmp	.+46     	; 0xdfc <vfprintf+0x372>
     dce:	a1 fc       	sbrc	r10, 1
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <vfprintf+0x34e>
     dd2:	88 e7       	ldi	r24, 0x78	; 120
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x352>
     dd8:	88 e5       	ldi	r24, 0x58	; 88
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	b6 01       	movw	r22, r12
     dde:	0c c0       	rjmp	.+24     	; 0xdf8 <vfprintf+0x36e>
     de0:	8a 2d       	mov	r24, r10
     de2:	86 78       	andi	r24, 0x86	; 134
     de4:	59 f0       	breq	.+22     	; 0xdfc <vfprintf+0x372>
     de6:	a1 fe       	sbrs	r10, 1
     de8:	02 c0       	rjmp	.+4      	; 0xdee <vfprintf+0x364>
     dea:	8b e2       	ldi	r24, 0x2B	; 43
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <vfprintf+0x366>
     dee:	80 e2       	ldi	r24, 0x20	; 32
     df0:	a7 fc       	sbrc	r10, 7
     df2:	8d e2       	ldi	r24, 0x2D	; 45
     df4:	b6 01       	movw	r22, r12
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     dfc:	89 14       	cp	r8, r9
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <vfprintf+0x384>
     e00:	b6 01       	movw	r22, r12
     e02:	80 e3       	ldi	r24, 0x30	; 48
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     e0a:	9a 94       	dec	r9
     e0c:	f7 cf       	rjmp	.-18     	; 0xdfc <vfprintf+0x372>
     e0e:	8a 94       	dec	r8
     e10:	f3 01       	movw	r30, r6
     e12:	e8 0d       	add	r30, r8
     e14:	f1 1d       	adc	r31, r1
     e16:	80 81       	ld	r24, Z
     e18:	b6 01       	movw	r22, r12
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     e20:	81 10       	cpse	r8, r1
     e22:	f5 cf       	rjmp	.-22     	; 0xe0e <vfprintf+0x384>
     e24:	22 20       	and	r2, r2
     e26:	09 f4       	brne	.+2      	; 0xe2a <vfprintf+0x3a0>
     e28:	42 ce       	rjmp	.-892    	; 0xaae <vfprintf+0x24>
     e2a:	b6 01       	movw	r22, r12
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 3c 07 	call	0xe78	; 0xe78 <fputc>
     e34:	2a 94       	dec	r2
     e36:	f6 cf       	rjmp	.-20     	; 0xe24 <vfprintf+0x39a>
     e38:	f6 01       	movw	r30, r12
     e3a:	86 81       	ldd	r24, Z+6	; 0x06
     e3c:	97 81       	ldd	r25, Z+7	; 0x07
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x3ba>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	2b 96       	adiw	r28, 0x0b	; 11
     e46:	e2 e1       	ldi	r30, 0x12	; 18
     e48:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__epilogue_restores__>

00000e4c <strnlen_P>:
     e4c:	fc 01       	movw	r30, r24
     e4e:	05 90       	lpm	r0, Z+
     e50:	61 50       	subi	r22, 0x01	; 1
     e52:	70 40       	sbci	r23, 0x00	; 0
     e54:	01 10       	cpse	r0, r1
     e56:	d8 f7       	brcc	.-10     	; 0xe4e <strnlen_P+0x2>
     e58:	80 95       	com	r24
     e5a:	90 95       	com	r25
     e5c:	8e 0f       	add	r24, r30
     e5e:	9f 1f       	adc	r25, r31
     e60:	08 95       	ret

00000e62 <strnlen>:
     e62:	fc 01       	movw	r30, r24
     e64:	61 50       	subi	r22, 0x01	; 1
     e66:	70 40       	sbci	r23, 0x00	; 0
     e68:	01 90       	ld	r0, Z+
     e6a:	01 10       	cpse	r0, r1
     e6c:	d8 f7       	brcc	.-10     	; 0xe64 <strnlen+0x2>
     e6e:	80 95       	com	r24
     e70:	90 95       	com	r25
     e72:	8e 0f       	add	r24, r30
     e74:	9f 1f       	adc	r25, r31
     e76:	08 95       	ret

00000e78 <fputc>:
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	fb 01       	movw	r30, r22
     e82:	23 81       	ldd	r18, Z+3	; 0x03
     e84:	21 fd       	sbrc	r18, 1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <fputc+0x16>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	2c c0       	rjmp	.+88     	; 0xee6 <fputc+0x6e>
     e8e:	22 ff       	sbrs	r18, 2
     e90:	16 c0       	rjmp	.+44     	; 0xebe <fputc+0x46>
     e92:	46 81       	ldd	r20, Z+6	; 0x06
     e94:	57 81       	ldd	r21, Z+7	; 0x07
     e96:	24 81       	ldd	r18, Z+4	; 0x04
     e98:	35 81       	ldd	r19, Z+5	; 0x05
     e9a:	42 17       	cp	r20, r18
     e9c:	53 07       	cpc	r21, r19
     e9e:	44 f4       	brge	.+16     	; 0xeb0 <fputc+0x38>
     ea0:	a0 81       	ld	r26, Z
     ea2:	b1 81       	ldd	r27, Z+1	; 0x01
     ea4:	9d 01       	movw	r18, r26
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	31 83       	std	Z+1, r19	; 0x01
     eac:	20 83       	st	Z, r18
     eae:	8c 93       	st	X, r24
     eb0:	26 81       	ldd	r18, Z+6	; 0x06
     eb2:	37 81       	ldd	r19, Z+7	; 0x07
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	37 83       	std	Z+7, r19	; 0x07
     eba:	26 83       	std	Z+6, r18	; 0x06
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <fputc+0x6e>
     ebe:	8b 01       	movw	r16, r22
     ec0:	ec 01       	movw	r28, r24
     ec2:	fb 01       	movw	r30, r22
     ec4:	00 84       	ldd	r0, Z+8	; 0x08
     ec6:	f1 85       	ldd	r31, Z+9	; 0x09
     ec8:	e0 2d       	mov	r30, r0
     eca:	09 95       	icall
     ecc:	89 2b       	or	r24, r25
     ece:	e1 f6       	brne	.-72     	; 0xe88 <fputc+0x10>
     ed0:	d8 01       	movw	r26, r16
     ed2:	16 96       	adiw	r26, 0x06	; 6
     ed4:	8d 91       	ld	r24, X+
     ed6:	9c 91       	ld	r25, X
     ed8:	17 97       	sbiw	r26, 0x07	; 7
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	17 96       	adiw	r26, 0x07	; 7
     ede:	9c 93       	st	X, r25
     ee0:	8e 93       	st	-X, r24
     ee2:	16 97       	sbiw	r26, 0x06	; 6
     ee4:	ce 01       	movw	r24, r28
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <__ultoa_invert>:
     ef0:	fa 01       	movw	r30, r20
     ef2:	aa 27       	eor	r26, r26
     ef4:	28 30       	cpi	r18, 0x08	; 8
     ef6:	51 f1       	breq	.+84     	; 0xf4c <__ultoa_invert+0x5c>
     ef8:	20 31       	cpi	r18, 0x10	; 16
     efa:	81 f1       	breq	.+96     	; 0xf5c <__ultoa_invert+0x6c>
     efc:	e8 94       	clt
     efe:	6f 93       	push	r22
     f00:	6e 7f       	andi	r22, 0xFE	; 254
     f02:	6e 5f       	subi	r22, 0xFE	; 254
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	af 4f       	sbci	r26, 0xFF	; 255
     f0c:	b1 e0       	ldi	r27, 0x01	; 1
     f0e:	3e d0       	rcall	.+124    	; 0xf8c <__ultoa_invert+0x9c>
     f10:	b4 e0       	ldi	r27, 0x04	; 4
     f12:	3c d0       	rcall	.+120    	; 0xf8c <__ultoa_invert+0x9c>
     f14:	67 0f       	add	r22, r23
     f16:	78 1f       	adc	r23, r24
     f18:	89 1f       	adc	r24, r25
     f1a:	9a 1f       	adc	r25, r26
     f1c:	a1 1d       	adc	r26, r1
     f1e:	68 0f       	add	r22, r24
     f20:	79 1f       	adc	r23, r25
     f22:	8a 1f       	adc	r24, r26
     f24:	91 1d       	adc	r25, r1
     f26:	a1 1d       	adc	r26, r1
     f28:	6a 0f       	add	r22, r26
     f2a:	71 1d       	adc	r23, r1
     f2c:	81 1d       	adc	r24, r1
     f2e:	91 1d       	adc	r25, r1
     f30:	a1 1d       	adc	r26, r1
     f32:	20 d0       	rcall	.+64     	; 0xf74 <__ultoa_invert+0x84>
     f34:	09 f4       	brne	.+2      	; 0xf38 <__ultoa_invert+0x48>
     f36:	68 94       	set
     f38:	3f 91       	pop	r19
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	26 9f       	mul	r18, r22
     f3e:	11 24       	eor	r1, r1
     f40:	30 19       	sub	r19, r0
     f42:	30 5d       	subi	r19, 0xD0	; 208
     f44:	31 93       	st	Z+, r19
     f46:	de f6       	brtc	.-74     	; 0xefe <__ultoa_invert+0xe>
     f48:	cf 01       	movw	r24, r30
     f4a:	08 95       	ret
     f4c:	46 2f       	mov	r20, r22
     f4e:	47 70       	andi	r20, 0x07	; 7
     f50:	40 5d       	subi	r20, 0xD0	; 208
     f52:	41 93       	st	Z+, r20
     f54:	b3 e0       	ldi	r27, 0x03	; 3
     f56:	0f d0       	rcall	.+30     	; 0xf76 <__ultoa_invert+0x86>
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__ultoa_invert+0x5c>
     f5a:	f6 cf       	rjmp	.-20     	; 0xf48 <__ultoa_invert+0x58>
     f5c:	46 2f       	mov	r20, r22
     f5e:	4f 70       	andi	r20, 0x0F	; 15
     f60:	40 5d       	subi	r20, 0xD0	; 208
     f62:	4a 33       	cpi	r20, 0x3A	; 58
     f64:	18 f0       	brcs	.+6      	; 0xf6c <__ultoa_invert+0x7c>
     f66:	49 5d       	subi	r20, 0xD9	; 217
     f68:	31 fd       	sbrc	r19, 1
     f6a:	40 52       	subi	r20, 0x20	; 32
     f6c:	41 93       	st	Z+, r20
     f6e:	02 d0       	rcall	.+4      	; 0xf74 <__ultoa_invert+0x84>
     f70:	a9 f7       	brne	.-22     	; 0xf5c <__ultoa_invert+0x6c>
     f72:	ea cf       	rjmp	.-44     	; 0xf48 <__ultoa_invert+0x58>
     f74:	b4 e0       	ldi	r27, 0x04	; 4
     f76:	a6 95       	lsr	r26
     f78:	97 95       	ror	r25
     f7a:	87 95       	ror	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	ba 95       	dec	r27
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__ultoa_invert+0x86>
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	61 05       	cpc	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	08 95       	ret
     f8c:	9b 01       	movw	r18, r22
     f8e:	ac 01       	movw	r20, r24
     f90:	0a 2e       	mov	r0, r26
     f92:	06 94       	lsr	r0
     f94:	57 95       	ror	r21
     f96:	47 95       	ror	r20
     f98:	37 95       	ror	r19
     f9a:	27 95       	ror	r18
     f9c:	ba 95       	dec	r27
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__ultoa_invert+0xa2>
     fa0:	62 0f       	add	r22, r18
     fa2:	73 1f       	adc	r23, r19
     fa4:	84 1f       	adc	r24, r20
     fa6:	95 1f       	adc	r25, r21
     fa8:	a0 1d       	adc	r26, r0
     faa:	08 95       	ret

00000fac <__prologue_saves__>:
     fac:	2f 92       	push	r2
     fae:	3f 92       	push	r3
     fb0:	4f 92       	push	r4
     fb2:	5f 92       	push	r5
     fb4:	6f 92       	push	r6
     fb6:	7f 92       	push	r7
     fb8:	8f 92       	push	r8
     fba:	9f 92       	push	r9
     fbc:	af 92       	push	r10
     fbe:	bf 92       	push	r11
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	ca 1b       	sub	r28, r26
     fd6:	db 0b       	sbc	r29, r27
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	09 94       	ijmp

00000fe4 <__epilogue_restores__>:
     fe4:	2a 88       	ldd	r2, Y+18	; 0x12
     fe6:	39 88       	ldd	r3, Y+17	; 0x11
     fe8:	48 88       	ldd	r4, Y+16	; 0x10
     fea:	5f 84       	ldd	r5, Y+15	; 0x0f
     fec:	6e 84       	ldd	r6, Y+14	; 0x0e
     fee:	7d 84       	ldd	r7, Y+13	; 0x0d
     ff0:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff2:	9b 84       	ldd	r9, Y+11	; 0x0b
     ff4:	aa 84       	ldd	r10, Y+10	; 0x0a
     ff6:	b9 84       	ldd	r11, Y+9	; 0x09
     ff8:	c8 84       	ldd	r12, Y+8	; 0x08
     ffa:	df 80       	ldd	r13, Y+7	; 0x07
     ffc:	ee 80       	ldd	r14, Y+6	; 0x06
     ffe:	fd 80       	ldd	r15, Y+5	; 0x05
    1000:	0c 81       	ldd	r16, Y+4	; 0x04
    1002:	1b 81       	ldd	r17, Y+3	; 0x03
    1004:	aa 81       	ldd	r26, Y+2	; 0x02
    1006:	b9 81       	ldd	r27, Y+1	; 0x01
    1008:	ce 0f       	add	r28, r30
    100a:	d1 1d       	adc	r29, r1
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	ed 01       	movw	r28, r26
    1018:	08 95       	ret

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
